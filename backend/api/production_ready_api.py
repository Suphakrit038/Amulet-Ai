#!/usr/bin/env python3
"""
Production-Ready API for Amulet-AI
API ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
"""

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import cv2
import numpy as np
from pathlib import Path
import io
from PIL import Image
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append(str(Path(__file__).parent.parent.parent))

from ai_models.optimized_model import OptimizedAmuletModel
import json
from datetime import datetime
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Amulet-AI Production API",
    description="Production-ready API for Thai Amulet Classification",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡πÉ‡∏ô production ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ domain ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Global model instance
model = None
model_loaded = False

class AmuletAPI:
    """API class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
    
    def __init__(self):
        self.model = OptimizedAmuletModel()
        self.model_path = Path(__file__).parent.parent.parent / "trained_model_optimized"
        self.temp_upload_dir = Path(__file__).parent.parent.parent / "temp_uploads"
        self.temp_upload_dir.mkdir(exist_ok=True)
        
    def load_model(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            if self.model_path.exists():
                success = self.model.load_model(self.model_path)
                if success:
                    logger.info("‚úÖ Model loaded successfully")
                    return True
                else:
                    logger.error("‚ùå Failed to load model")
                    return False
            else:
                logger.error(f"‚ùå Model directory not found: {self.model_path}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Error loading model: {e}")
            return False
    
    def preprocess_image(self, image_bytes):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            self.temp_upload_dir.mkdir(exist_ok=True)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å bytes ‡πÄ‡∏õ‡πá‡∏ô numpy array
            image = Image.open(io.BytesIO(image_bytes))
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô OpenCV format
            opencv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            temp_filename = f"temp_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}.jpg"
            temp_path = self.temp_upload_dir / temp_filename
            
            success = cv2.imwrite(str(temp_path), opencv_image)
            if not success:
                logger.error("Failed to save temporary image")
                return None
            
            return temp_path
            
        except Exception as e:
            logger.error(f"Error preprocessing image: {e}")
            return None
    
    def cleanup_temp_file(self, file_path):
        """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"""
        try:
            if file_path and file_path.exists():
                file_path.unlink()
        except Exception as e:
            logger.error(f"Error cleaning up temp file: {e}")
    
    def predict_amulet(self, image_bytes):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"""
        temp_path = None
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            temp_path = self.preprocess_image(image_bytes)
            if temp_path is None:
                return None
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction, confidence = self.model.predict(temp_path)
            
            if prediction is None:
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            thai_names = {
                'phra_nang_phya': '‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤',
                'phra_rod': '‡∏û‡∏£‡∏∞‡∏£‡πá‡∏≠‡∏î',
                'phra_somdej': '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à'
            }
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result = {
                'predicted_class': prediction,
                'thai_name': thai_names.get(prediction, prediction),
                'confidence': float(confidence),
                'confidence_percentage': f"{confidence * 100:.1f}%",
                'timestamp': datetime.now().isoformat(),
                'model_version': '2.0.0'
            }
            
            return result
            
        except Exception as e:
            logger.error(f"Error during prediction: {e}")
            return None
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            self.cleanup_temp_file(temp_path)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á API instance
api_instance = AmuletAPI()

@app.on_event("startup")
async def startup_event():
    """‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API"""
    global model_loaded
    logger.info("üöÄ Starting Amulet-AI Production API...")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_loaded = api_instance.load_model()
    
    if model_loaded:
        logger.info("‚úÖ API ready for predictions")
    else:
        logger.warning("‚ö†Ô∏è API started but model not loaded")

@app.get("/")
async def root():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á API"""
    return {
        "message": "Amulet-AI Production API",
        "version": "2.0.0",
        "status": "ready" if model_loaded else "model_not_loaded",
        "description": "Thai Amulet Classification API"
    }

@app.get("/health")
async def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á API"""
    return {
        "status": "healthy" if model_loaded else "unhealthy",
        "model_loaded": model_loaded,
        "timestamp": datetime.now().isoformat()
    }

@app.post("/predict")
async def predict_amulet(file: UploadFile = File(...)):
    """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
    
    if not model_loaded:
        raise HTTPException(status_code=503, detail="Model not loaded")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if not file.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="File must be an image")
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        image_bytes = await file.read()
        
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        result = api_instance.predict_amulet(image_bytes)
        
        if result is None:
            raise HTTPException(status_code=400, detail="Could not process image")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        result['file_info'] = {
            'filename': file.filename,
            'content_type': file.content_type,
            'size_bytes': len(image_bytes)
        }
        
        return JSONResponse(content=result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Prediction error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/classes")
async def get_classes():
    """‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ classes ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"""
    classes_info = {
        'phra_nang_phya': {
            'english': 'phra_nang_phya',
            'thai': '‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤',
            'description': 'Thai amulet type: Phra Nang Phaya'
        },
        'phra_rod': {
            'english': 'phra_rod',
            'thai': '‡∏û‡∏£‡∏∞‡∏£‡πá‡∏≠‡∏î',
            'description': 'Thai amulet type: Phra Rod'
        },
        'phra_somdej': {
            'english': 'phra_somdej',
            'thai': '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à',
            'description': 'Thai amulet type: Phra Somdej'
        }
    }
    
    return {
        'total_classes': len(classes_info),
        'classes': classes_info,
        'model_version': '2.0.0'
    }

@app.get("/model-info")
async def get_model_info():
    """‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    if not model_loaded:
        return {"status": "Model not loaded"}
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• config ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        config_path = api_instance.model_path / 'model_config.json'
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        else:
            return {"status": "Model config not found"}
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô API server
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        reload=False,  # ‡∏õ‡∏¥‡∏î reload ‡πÉ‡∏ô production
        log_level="info"
    )