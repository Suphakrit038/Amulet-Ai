"""
Enhanced recommendation system for amulet selling
Integrates market data and pricing intelligence
"""
import logging

logger = logging.getLogger(__name__)

def recommend_markets(class_id, valuation):
    """
    Recommend markets for selling based on class and valuation
    Enhanced with market intelligence
    
    Args:
        class_id (int): The predicted class ID
        valuation (dict): Valuation dictionary with p05, p50, p95
        
    Returns:
        list: List of market recommendations
    """
    # Map class_id to class_name
    class_names = {
        0: "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡∏Å‡∏ß‡∏¢‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô",
        1: "‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ê‡∏≤‡∏ô‡∏ö‡∏±‡∏ß",
        2: "‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏á‡∏´‡πå",
        3: "‡∏™‡∏µ‡∏ß‡∏•‡∏µ"
    }
    
    class_name = class_names.get(class_id, "unknown")
    price_range = valuation.get("p50", 5000)
    
    # Try to get market insights
    market_activity = "medium"  # default
    try:
        from market_scraper import get_market_insights
        market_data = get_market_insights(class_name)
        market_activity = market_data.get("market_activity", "medium")
        logger.info("‚úÖ Using market data for recommendations")
    except ImportError:
        logger.info("‚ö†Ô∏è Market insights not available, using default recommendations")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Market insights failed: {e}")
    
    recommendations = []
    
    # High-value items (> 10,000 baht)
    if price_range > 10000:
        recommendations.extend([
            {
                "market": "Facebook ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á VIP", 
                "reason": "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏î‡∏µ",
                "priority": "high",
                "estimated_time": "7-14 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "Instagram ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ó‡πâ", 
                "reason": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á",
                "priority": "high", 
                "estimated_time": "5-10 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ (‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ó‡∏¢‡πå)",
                "reason": "‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°",
                "priority": "medium",
                "estimated_time": "1-2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
            }
        ])
    
    # Medium-value items (3,000-10,000 baht)
    elif price_range > 3000:
        recommendations.extend([
            {
                "market": "Facebook Marketplace", 
                "reason": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞",
                "priority": "high",
                "estimated_time": "3-7 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "Shopee", 
                "reason": "‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
                "priority": "high",
                "estimated_time": "1-5 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "LINE Official Account ‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏£‡∏∞",
                "reason": "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
                "priority": "medium",
                "estimated_time": "1-3 ‡∏ß‡∏±‡∏ô"
            }
        ])
    
    # Lower-value items (< 3,000 baht)  
    else:
        recommendations.extend([
            {
                "market": "Shopee", 
                "reason": "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞",
                "priority": "high",
                "estimated_time": "1-3 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "Facebook Marketplace",
                "reason": "‡∏Ç‡∏≤‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°",
                "priority": "high", 
                "estimated_time": "2-5 ‡∏ß‡∏±‡∏ô"
            },
            {
                "market": "Lazada",
                "reason": "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏ç‡πà ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà",
                "priority": "medium",
                "estimated_time": "3-7 ‡∏ß‡∏±‡∏ô"
            }
        ])
    
    # Add class-specific recommendations
    if class_name == "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡∏Å‡∏ß‡∏¢‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô":
        recommendations.append({
            "market": "‡∏Å‡∏•‡∏∏‡πà‡∏° LP Kuay ‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô Facebook",
            "reason": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡∏Å‡∏ß‡∏¢ ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°",
            "priority": "high",
            "estimated_time": "1-7 ‡∏ß‡∏±‡∏ô"
        })
    elif class_name == "‡∏™‡∏µ‡∏ß‡∏•‡∏µ":
        recommendations.append({
            "market": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏£‡∏∞‡∏™‡∏µ‡∏ß‡∏•‡∏µ Facebook",
            "reason": "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏û‡∏£‡∏∞‡∏™‡∏µ‡∏ß‡∏•‡∏µ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡πâ‡∏≤‡∏ô",
            "priority": "high", 
            "estimated_time": "1-7 ‡∏ß‡∏±‡∏ô"
        })
    
    # Adjust recommendations based on market activity
    if market_activity == "high":
        # Add online marketplaces for high activity
        recommendations.insert(0, {
            "market": "TikTok Shop",
            "reason": "‡∏ï‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó",
            "priority": "high",
            "estimated_time": "1-3 ‡∏ß‡∏±‡∏ô"
        })
    elif market_activity == "low":
        # Focus on traditional channels for low activity
        recommendations.append({
            "market": "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô",
            "reason": "‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö",
            "priority": "medium",
            "estimated_time": "1-2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
        })
    
    # Sort by priority
    priority_order = {"high": 0, "medium": 1, "low": 2}
    recommendations.sort(key=lambda x: priority_order.get(x.get("priority", "low"), 2))
    
    # Return top 5 recommendations
    return recommendations[:5]

def get_selling_tips(class_id, valuation):
    """
    Get specific selling tips for the amulet class
    
    Args:
        class_id (int): The predicted class ID
        valuation (dict): Valuation dictionary
        
    Returns:
        list: List of selling tips
    """
    class_names = {
        0: "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡∏Å‡∏ß‡∏¢‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô",
        1: "‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ê‡∏≤‡∏ô‡∏ö‡∏±‡∏ß", 
        2: "‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏á‡∏´‡πå",
        3: "‡∏™‡∏µ‡∏ß‡∏•‡∏µ"
    }
    
    class_name = class_names.get(class_id, "unknown")
    
    general_tips = [
        "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏™‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
        "üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ß‡∏±‡∏î, ‡∏õ‡∏µ, ‡∏Ç‡∏ô‡∏≤‡∏î)",
        "üîç ‡πÅ‡∏ô‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡πâ‡∏≤‡∏°‡∏µ",
        "üí∞ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏±‡πâ‡∏ô",
        "ü§ù ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û"
    ]
    
    class_specific_tips = {
        "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡∏Å‡∏ß‡∏¢‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô": [
            "üèõÔ∏è ‡πÄ‡∏ô‡πâ‡∏ô‡∏¢‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏î‡∏´‡∏ô‡∏≠‡∏á‡∏≠‡∏µ‡∏î‡∏∏‡∏Å",
            "üìÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô", 
            "üîÆ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì"
        ],
        "‡∏™‡∏µ‡∏ß‡∏•‡∏µ": [
            "üíº ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "üíé ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            "üéØ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£"
        ],
        "‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ê‡∏≤‡∏ô‡∏ö‡∏±‡∏ß": [
            "üå∏ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏ö‡∏±‡∏ß",
            "üìø ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå",
            "üé® ‡πÄ‡∏ô‡πâ‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≤‡∏á‡∏ù‡∏µ‡∏°‡∏∑‡∏≠"
        ],
        "‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏á‡∏´‡πå": [
            "ü¶Å ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏á‡∏´‡πå",
            "üëë ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡πà‡∏≤‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà",
            "üè∫ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏"
        ]
    }
    
    tips = general_tips.copy()
    if class_name in class_specific_tips:
        tips.extend(class_specific_tips[class_name])
    
    return tips
