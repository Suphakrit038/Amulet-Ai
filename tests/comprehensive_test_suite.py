#!/usr/bin/env python3
"""
üß™ Comprehensive Security & Performance Test Suite
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
"""

import asyncio
import aiohttp
import time
import json
import base64
import io
from PIL import Image
import requests
from datetime import datetime
from typing import Dict, List, Any

class SecurityTester:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = None
        self.test_results = []
        
    async def setup_session(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ HTTP session"""
        self.session = aiohttp.ClientSession()
    
    async def cleanup_session(self):
        """‡∏õ‡∏¥‡∏î HTTP session"""
        if self.session:
            await self.session.close()
    
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        result = {
            'test_name': test_name,
            'success': success,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}: {details}")
    
    async def test_health_endpoint(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö health endpoint"""
        try:
            async with self.session.get(f"{self.base_url}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    if 'security' in data and 'services' in data:
                        self.log_test("Health Endpoint", True, f"Status: {response.status}")
                        return True
                    else:
                        self.log_test("Health Endpoint", False, "Missing security/services info")
                        return False
                else:
                    self.log_test("Health Endpoint", False, f"Status: {response.status}")
                    return False
        except Exception as e:
            self.log_test("Health Endpoint", False, f"Error: {str(e)}")
            return False
    
    async def test_authentication_required(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication (‡πÅ‡∏ï‡πà API ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ auth)"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            test_image = Image.new('RGB', (100, 100), color='red')
            img_bytes = io.BytesIO()
            test_image.save(img_bytes, format='PNG')
            img_data = img_bytes.getvalue()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö predict endpoint ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ token (API ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
            data = aiohttp.FormData()
            data.add_field('file', img_data, filename='test.png', content_type='image/png')
            
            async with self.session.post(f"{self.base_url}/predict", data=data) as response:
                if response.status == 200:  # API ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ auth
                    self.log_test("API Accessibility", True, "API accessible without authentication")
                    return True
                else:
                    self.log_test("API Accessibility", False, f"Unexpected status: {response.status}")
                    return False
        except Exception as e:
            self.log_test("API Accessibility", False, f"Error: {str(e)}")
            return False
    
    async def test_user_registration(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        try:
            user_data = {
                "username": f"test_user_{int(time.time())}",
                "email": f"test_{int(time.time())}@example.com",
                "password": "testpassword123"
            }
            
            async with self.session.post(
                f"{self.base_url}/auth/register",
                json=user_data
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'username' in data:
                        self.log_test("User Registration", True, f"User created: {data['username']}")
                        return True, user_data
                    else:
                        self.log_test("User Registration", False, "Invalid response format")
                        return False, None
                else:
                    error_data = await response.json()
                    self.log_test("User Registration", False, f"Status: {response.status}, Error: {error_data}")
                    return False, None
        except Exception as e:
            self.log_test("User Registration", False, f"Error: {str(e)}")
            return False, None
    
    async def test_user_login(self, user_data: Dict[str, str]):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô"""
        try:
            login_data = {
                "username": user_data["username"],
                "password": user_data["password"]
            }
            
            async with self.session.post(
                f"{self.base_url}/auth/login",
                data=login_data
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'access_token' in data:
                        self.log_test("User Login", True, f"Token received: {data['token_type']}")
                        return True, data['access_token']
                    else:
                        self.log_test("User Login", False, "No access token in response")
                        return False, None
                else:
                    error_data = await response.json()
                    self.log_test("User Login", False, f"Status: {response.status}, Error: {error_data}")
                    return False, None
        except Exception as e:
            self.log_test("User Login", False, f"Error: {str(e)}")
            return False, None
    async def test_basic_prediction(self):
        """Test basic prediction functionality with the existing API"""
        try:
            # Test if prediction endpoint exists and is accessible
            async with self.session.get(f"{self.base_url}/predict") as response:
                if response.status == 200:
                    self.log_test("Basic Prediction Access", True, "Prediction endpoint accessible via GET")
                elif response.status == 405:  # Method not allowed, endpoint exists but needs POST
                    self.log_test("Basic Prediction Access", True, "Prediction endpoint exists (requires POST)")
                else:
                    self.log_test("Basic Prediction Access", False, f"Unexpected status: {response.status}")
        except Exception as e:
            self.log_test("Basic Prediction Access", False, f"Error: {str(e)}")

    async def test_authenticated_predict(self, token: str):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ authentication"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            test_image = Image.new('RGB', (224, 224), color='blue')
            img_bytes = io.BytesIO()
            test_image.save(img_bytes, format='PNG')
            img_data = img_bytes.getvalue()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö predict endpoint ‡∏î‡πâ‡∏ß‡∏¢ token
            headers = {'Authorization': f'Bearer {token}'}
            data = aiohttp.FormData()
            data.add_field('file', img_data, filename='test.png', content_type='image/png')
            
            async with self.session.post(
                f"{self.base_url}/predict",
                headers=headers,
                data=data
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if 'success' in data and 'request_id' in data:
                        self.log_test("Authenticated Predict", True, f"Success: {data['success']}")
                        return True
                    else:
                        self.log_test("Authenticated Predict", False, "Invalid response format")
                        return False
                else:
                    error_data = await response.json()
                    self.log_test("Authenticated Predict", False, f"Status: {response.status}, Error: {error_data}")
                    return False
        except Exception as e:
            self.log_test("Authenticated Predict", False, f"Error: {str(e)}")
            return False
    
    async def test_rate_limiting(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö rate limiting (simplified)"""
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á request ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
            requests_sent = 0
            rate_limited = False
            
            for i in range(20):  # ‡∏™‡πà‡∏á 20 requests
                async with self.session.get(f"{self.base_url}/health") as response:
                    requests_sent += 1
                    if response.status == 429:  # Too Many Requests
                        rate_limited = True
                        break
                    await asyncio.sleep(0.1)  # ‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ
            
            if rate_limited:
                self.log_test("Rate Limiting", True, f"Rate limited after {requests_sent} requests")
            else:
                self.log_test("Rate Limiting", False, f"No rate limiting detected ({requests_sent} requests)")
            
            return rate_limited
            
        except Exception as e:
            self.log_test("Rate Limiting", False, f"Error: {str(e)}")
            return False
    
    async def test_security_headers(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö security headers"""
        try:
            async with self.session.get(f"{self.base_url}/health") as response:
                headers = response.headers
                
                required_headers = [
                    'X-Content-Type-Options',
                    'X-Frame-Options',
                    'X-XSS-Protection'
                ]
                
                missing_headers = []
                for header in required_headers:
                    if header not in headers:
                        missing_headers.append(header)
                
                if not missing_headers:
                    self.log_test("Security Headers", True, f"All required headers present")
                    return True
                else:
                    self.log_test("Security Headers", False, f"Missing headers: {missing_headers}")
                    return False
                    
        except Exception as e:
            self.log_test("Security Headers", False, f"Error: {str(e)}")
            return False
    
    async def run_all_security_tests(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üîí Starting Security Tests...")
        print("=" * 50)
        
        await self.setup_session()
        
        try:
            # Test 1: Health endpoint
            await self.test_health_endpoint()
            
            # Test 2: API accessibility
            await self.test_authentication_required()
            
            # Test 3: Security headers (may not be present in basic API)
            await self.test_security_headers()
            
            # Test 4: Basic prediction test
            await self.test_basic_prediction()
            
            # Test 5: Rate limiting (may not be implemented)
            await self.test_rate_limiting()
            
        finally:
            await self.cleanup_session()
        
        # Summary
        total_tests = len(self.test_results)
        passed_tests = sum(1 for test in self.test_results if test['success'])
        
        print("\n" + "=" * 50)
        print(f"üîí Security Test Summary: {passed_tests}/{total_tests} passed")
        print("=" * 50)
        
        return {
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'success_rate': passed_tests / total_tests if total_tests > 0 else 0,
            'test_results': self.test_results
        }

class PerformanceTester:
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.performance_results = []
    
    def log_performance(self, test_name: str, metric: str, value: float, unit: str = ""):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        result = {
            'test_name': test_name,
            'metric': metric,
            'value': value,
            'unit': unit,
            'timestamp': datetime.now().isoformat()
        }
        self.performance_results.append(result)
        
        print(f"üìä {test_name} - {metric}: {value:.3f}{unit}")
    
    async def test_api_response_time(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á API"""
        print("‚ö° Testing API Response Time...")
        
        response_times = []
        
        async with aiohttp.ClientSession() as session:
            for i in range(10):  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                start_time = time.time()
                try:
                    async with session.get(f"{self.base_url}/health") as response:
                        await response.json()
                        response_time = time.time() - start_time
                        response_times.append(response_time)
                except Exception as e:
                    print(f"   ‚ùå Request {i+1} failed: {e}")
        
        if response_times:
            avg_time = sum(response_times) / len(response_times)
            max_time = max(response_times)
            min_time = min(response_times)
            
            self.log_performance("API Response Time", "Average", avg_time, "s")
            self.log_performance("API Response Time", "Maximum", max_time, "s")
            self.log_performance("API Response Time", "Minimum", min_time, "s")
            
            return {
                'average': avg_time,
                'maximum': max_time,
                'minimum': min_time,
                'samples': len(response_times)
            }
        else:
            return None
    
    async def test_concurrent_requests(self, concurrent_users: int = 5):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö concurrent requests"""
        print(f"üîÑ Testing Concurrent Requests ({concurrent_users} users)...")
        
        async def make_request(session, user_id):
            start_time = time.time()
            try:
                async with session.get(f"{self.base_url}/health") as response:
                    await response.json()
                    return time.time() - start_time, True
            except Exception as e:
                return time.time() - start_time, False
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            for i in range(concurrent_users):
                task = make_request(session, i)
                tasks.append(task)
            
            results = await asyncio.gather(*tasks)
        
        response_times = [r[0] for r in results]
        success_count = sum(1 for r in results if r[1])
        
        avg_time = sum(response_times) / len(response_times)
        success_rate = success_count / len(results)
        
        self.log_performance("Concurrent Requests", f"Average Time ({concurrent_users} users)", avg_time, "s")
        self.log_performance("Concurrent Requests", "Success Rate", success_rate * 100, "%")
        
        return {
            'concurrent_users': concurrent_users,
            'average_time': avg_time,
            'success_rate': success_rate,
            'total_requests': len(results)
        }
    
    def test_system_resources(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üíª Testing System Resources...")
        
        try:
            import psutil
            
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('.')
            
            self.log_performance("System Resources", "CPU Usage", cpu_percent, "%")
            self.log_performance("System Resources", "Memory Usage", memory.percent, "%")
            self.log_performance("System Resources", "Disk Usage", (disk.used / disk.total) * 100, "%")
            
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'disk_percent': (disk.used / disk.total) * 100,
                'memory_available_gb': memory.available / (1024**3)
            }
            
        except ImportError:
            print("   ‚ö†Ô∏è psutil not available for system resource monitoring")
            return None
    
    async def run_all_performance_tests(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("‚ö° Starting Performance Tests...")
        print("=" * 50)
        
        # Test response time
        response_test = await self.test_api_response_time()
        
        # Test concurrent requests
        concurrent_test = await self.test_concurrent_requests(5)
        
        # Test system resources
        resource_test = self.test_system_resources()
        
        print("\n" + "=" * 50)
        print(f"‚ö° Performance Test Summary: {len(self.performance_results)} metrics collected")
        print("=" * 50)
        
        return {
            'response_time_test': response_test,
            'concurrent_test': concurrent_test,
            'resource_test': resource_test,
            'all_metrics': self.performance_results
        }

async def run_comprehensive_tests():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
    print("üß™ Starting Comprehensive Test Suite")
    print("=" * 70)
    
    # Security tests
    security_tester = SecurityTester()
    security_results = await security_tester.run_all_security_tests()
    
    # Performance tests
    performance_tester = PerformanceTester()
    performance_results = await performance_tester.run_all_performance_tests()
    
    # Combined results
    final_results = {
        'test_suite_version': '2.0.0',
        'timestamp': datetime.now().isoformat(),
        'security_tests': security_results,
        'performance_tests': performance_results,
        'overall_summary': {
            'security_passed': security_results['passed_tests'],
            'security_total': security_results['total_tests'],
            'security_rate': security_results['success_rate'],
            'performance_metrics': len(performance_results['all_metrics'])
        }
    }
    
    # Save results
    with open('comprehensive_test_results.json', 'w', encoding='utf-8') as f:
        json.dump(final_results, f, indent=2, ensure_ascii=False)
    
    print("\n" + "=" * 70)
    print("üéâ COMPREHENSIVE TEST SUMMARY")
    print("=" * 70)
    print(f"üîí Security: {security_results['passed_tests']}/{security_results['total_tests']} tests passed ({security_results['success_rate']:.1%})")
    print(f"‚ö° Performance: {len(performance_results['all_metrics'])} metrics collected")
    print(f"üìÑ Results saved to: comprehensive_test_results.json")
    print("=" * 70)
    
    return final_results

if __name__ == "__main__":
    asyncio.run(run_comprehensive_tests())