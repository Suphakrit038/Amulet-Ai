#!/usr/bin/env python3
"""
Amulet-AI System Launcher
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
"""

import os
import sys
import subprocess
import time
import threading
import signal
import webbrowser
from pathlib import Path

class AmuletSystemLauncher:
    def __init__(self):
        self.backend_process = None
        self.frontend_process = None
        self.root_dir = Path(__file__).parent
        
    def check_dependencies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
        
        required_packages = [
            'streamlit',
            'fastapi',
            'uvicorn',
            'requests',
            'Pillow'
        ]
        
        missing_packages = []
        for package in required_packages:
            try:
                __import__(package)
            except ImportError:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå ‡∏Ç‡∏≤‡∏î packages: {', '.join(missing_packages)}")
            print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î...")
            try:
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install', 
                    *missing_packages
                ])
                print("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except subprocess.CalledProcessError:
                print("‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return False
        else:
            print("‚úÖ ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        
        return True
    
    def start_backend(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Backend API"""
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° Backend API...")
        
        backend_dir = self.root_dir / "backend"
        if not backend_dir.exists():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backend")
            return False
        
        try:
            self.backend_process = subprocess.Popen([
                sys.executable, '-m', 'uvicorn',
                'api:app',
                '--host', '0.0.0.0',
                '--port', '8000',
                '--reload'
            ], cwd=backend_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            
            # ‡∏£‡∏≠ backend ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            time.sleep(3)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if self.backend_process.poll() is None:
                print("‚úÖ Backend API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:8000")
                return True
            else:
                print("‚ùå Backend API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return False
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° Backend: {e}")
            return False
    
    def start_frontend(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Frontend UI"""
        print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° Frontend UI...")
        
        frontend_dir = self.root_dir / "frontend"
        if not frontend_dir.exists():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå frontend")
            return False
        
        app_file = frontend_dir / "app_straemlit.py"
        if not app_file.exists():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå app_straemlit.py")
            return False
        
        try:
            self.frontend_process = subprocess.Popen([
                sys.executable, '-m', 'streamlit', 'run',
                'app_straemlit.py',
                '--server.port', '8501',
                '--server.headless', 'true'
            ], cwd=frontend_dir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            
            # ‡∏£‡∏≠ frontend ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            time.sleep(5)
            
            if self.frontend_process.poll() is None:
                print("‚úÖ Frontend UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:8501")
                return True
            else:
                print("‚ùå Frontend UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return False
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° Frontend: {e}")
            return False
    
    def open_browser(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        time.sleep(2)
        try:
            webbrowser.open('http://localhost:8501')
            print("üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
        except:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î http://localhost:8501 ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")
    
    def cleanup(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        
        if self.frontend_process:
            try:
                self.frontend_process.terminate()
                self.frontend_process.wait(timeout=5)
                print("‚úÖ ‡∏õ‡∏¥‡∏î Frontend ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except:
                self.frontend_process.kill()
        
        if self.backend_process:
            try:
                self.backend_process.terminate()
                self.backend_process.wait(timeout=5)
                print("‚úÖ ‡∏õ‡∏¥‡∏î Backend ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except:
                self.backend_process.kill()
        
        print("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    def signal_handler(self, signum, frame):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        self.cleanup()
        sys.exit(0)
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("=" * 50)
        print("üè∫ Amulet-AI System Launcher")
        print("‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        print("=" * 50)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ signal handler
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
            if not self.check_dependencies():
                return
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Backend
            if not self.start_backend():
                return
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Frontend
            if not self.start_frontend():
                self.cleanup()
                return
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
            browser_thread = threading.Thread(target=self.open_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            print("\n" + "=" * 50)
            print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            print("üåê Frontend: http://localhost:8501")
            print("üöÄ Backend API: http://localhost:8000")
            print("üìö API Docs: http://localhost:8000/docs")
            print("\n‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
            print("=" * 50)
            
            # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏¥‡∏î
            while True:
                if self.backend_process and self.backend_process.poll() is not None:
                    print("‚ùå Backend ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                    break
                
                if self.frontend_process and self.frontend_process.poll() is not None:
                    print("‚ùå Frontend ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                    break
                
                time.sleep(1)
        
        except KeyboardInterrupt:
            pass
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        finally:
            self.cleanup()

def main():
    """Main function"""
    launcher = AmuletSystemLauncher()
    launcher.run()

if __name__ == "__main__":
    main()
