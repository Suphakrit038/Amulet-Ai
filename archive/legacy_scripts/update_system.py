#!/usr/bin/env python3
"""
API Integration Script - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
"""

import shutil
import json
from pathlib import Path

def update_api_with_new_model():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà"""
    print("üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó API ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà...")
    
    # Backup old model
    old_model_dir = Path("trained_model")
    backup_dir = Path("trained_model_backup")
    new_model_dir = Path("trained_model_v2")
    
    if old_model_dir.exists():
        if backup_dir.exists():
            shutil.rmtree(backup_dir)
        shutil.move(str(old_model_dir), str(backup_dir))
        print(f"  ‚úÖ Backup ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ: {backup_dir}")
    
    # Move new model to main location
    if new_model_dir.exists():
        shutil.move(str(new_model_dir), str(old_model_dir))
        print(f"  ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ: {old_model_dir}")
    
    # Update labels.json
    class_mapping_file = old_model_dir / "class_mapping.json"
    if class_mapping_file.exists():
        with open(class_mapping_file, 'r', encoding='utf-8') as f:
            class_mapping = json.load(f)
        
        # Create new labels.json
        labels_data = {
            "current_classes": {str(v): k for k, v in class_mapping.items()},
            "class_mapping": class_mapping,
            "total_classes": len(class_mapping),
            "version": "3.0",
            "last_updated": "2025-10-01T16:30:00.000000"
        }
        
        labels_file = Path("ai_models") / "labels.json"
        with open(labels_file, 'w', encoding='utf-8') as f:
            json.dump(labels_data, f, ensure_ascii=False, indent=2)
        
        print(f"  ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó labels.json")
    
    print("üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó API ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

def create_summary_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ"""
    print("\nüìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ...")
    
    report = """
üéâ Amulet-AI Dataset Reorganization & Model Training - COMPLETE
================================================================

üìä Phase Summary:
================

Phase 1: Dataset Organization ‚úÖ
- ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö 173 ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 6 ‡∏Ñ‡∏•‡∏≤‡∏™
- ‡πÅ‡∏¢‡∏Å‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô

Phase 2: Data Preprocessing & Augmentation ‚úÖ
- ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 173 -> 519 ‡πÑ‡∏ü‡∏•‡πå
- Data augmentation: rotation, brightness, contrast, flip, blur
- ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: Train (70%), Validation (15%), Test (15%)

Phase 3: Model Training ‚úÖ
- ‡πÇ‡∏°‡πÄ‡∏î‡∏•: Random Forest Classifier v3.0
- Training Accuracy: 100.00%
- Validation Accuracy: 80.26%
- Test Accuracy: 71.76%
- Cross-validation: 70.38% (¬±7.58%)

üéØ Final Results:
================
‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà (v3.0) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚úÖ API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
‚úÖ Frontend ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üìÅ File Structure:
=================
- organized_dataset/     # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß
- trained_model/         # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà v3.0
- trained_model_backup/  # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤ (backup)

üöÄ Next Steps:
=============
1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á
2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á data augmentation ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
3. ‡∏•‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Deep Learning (CNN)
4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô‡∏ô‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

‚ú® ‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!
"""
    
    report_file = Path("PHASE_COMPLETION_REPORT.md")
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"  ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô: {report_file}")

def main():
    print("üîß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà...")
    print("=" * 50)
    
    update_api_with_new_model()
    create_summary_report()
    
    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
    print("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI v3.0 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")

if __name__ == "__main__":
    main()