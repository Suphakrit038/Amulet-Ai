#!/usr/bin/env python3
"""
Updated Model Loader for trained_model directory
‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å trained_model
"""

import joblib
import json
import numpy as np
from pathlib import Path
from PIL import Image
import cv2
from typing import Dict, List, Tuple, Optional
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier

class UpdatedAmuletClassifier:
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô classifier ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà"""
    
    def __init__(self, model_path: str = "trained_model"):
        self.model_path = Path(model_path)
        self.model = None
        self.scaler = None
        self.label_encoder = None
        self.class_mapping = None
        self.model_info = None
        self.image_size = (224, 224)
        
    def load_model(self, model_path: Optional[str] = None):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ artifacts ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if model_path:
            self.model_path = Path(model_path)
            
        print(f"Loading model from: {self.model_path}")
        
        # ‡πÇ‡∏´‡∏•‡∏î model files
        try:
            # ‡πÇ‡∏´‡∏•‡∏î classifier
            classifier_path = self.model_path / "classifier.joblib"
            if classifier_path.exists():
                self.model = joblib.load(classifier_path)
                print("‚úÖ Loaded classifier.joblib")
            else:
                raise FileNotFoundError(f"Classifier not found: {classifier_path}")
            
            # ‡πÇ‡∏´‡∏•‡∏î scaler
            scaler_path = self.model_path / "scaler.joblib"
            if scaler_path.exists():
                self.scaler = joblib.load(scaler_path)
                print("‚úÖ Loaded scaler.joblib")
            else:
                print("‚ö†Ô∏è Scaler not found, will use raw features")
            
            # ‡πÇ‡∏´‡∏•‡∏î label encoder
            encoder_path = self.model_path / "label_encoder.joblib"
            if encoder_path.exists():
                self.label_encoder = joblib.load(encoder_path)
                print("‚úÖ Loaded label_encoder.joblib")
            else:
                print("‚ö†Ô∏è Label encoder not found")
            
            # ‡πÇ‡∏´‡∏•‡∏î model info
            info_path = self.model_path / "model_info.json"
            if info_path.exists():
                with open(info_path, 'r', encoding='utf-8') as f:
                    self.model_info = json.load(f)
                self.class_mapping = self.model_info.get('classes', {})
                self.image_size = tuple(self.model_info.get('image_size', [224, 224]))
                print("‚úÖ Loaded model_info.json")
            else:
                print("‚ö†Ô∏è Model info not found")
            
            print(f"üéØ Model loaded successfully!")
            print(f"üìä Accuracy: {self.model_info.get('accuracy', 'Unknown'):.4f}")
            print(f"üìÅ Classes: {len(self.class_mapping)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error loading model: {e}")
            return False
    
    def preprocess_image(self, image: np.ndarray) -> Optional[np.ndarray]:
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô numpy array
            if not isinstance(image, np.ndarray):
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if len(image.shape) == 3 and image.shape[2] == 3:
                # BGR to RGB ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô OpenCV format
                if image.dtype == np.uint8 and np.max(image) > 1:
                    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            image_resized = cv2.resize(image, self.image_size)
            
            # Normalize
            if image_resized.dtype == np.uint8:
                image_resized = image_resized.astype(np.float32) / 255.0
            
            # Flatten ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö traditional ML model
            features = image_resized.flatten()
            
            return features.reshape(1, -1)  # Shape: (1, features)
            
        except Exception as e:
            print(f"Error preprocessing image: {e}")
            return None
    
    def predict(self, image: np.ndarray) -> Dict:
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
        if self.model is None:
            return {
                "success": False,
                "error": "Model not loaded",
                "predicted_class": None,
                "confidence": 0.0,
                "probabilities": {}
            }
        
        try:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            features = self.preprocess_image(image)
            if features is None:
                return {
                    "success": False,
                    "error": "Failed to preprocess image",
                    "predicted_class": None,
                    "confidence": 0.0,
                    "probabilities": {}
                }
            
            # ‡πÉ‡∏ä‡πâ scaler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if self.scaler is not None:
                features = self.scaler.transform(features)
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            prediction = self.model.predict(features)[0]
            probabilities = self.model.predict_proba(features)[0]
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            class_names = list(self.class_mapping.keys())
            confidence = float(np.max(probabilities))
            predicted_class = class_names[prediction]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á probability dictionary
            prob_dict = {
                class_names[i]: float(prob) 
                for i, prob in enumerate(probabilities)
            }
            
            return {
                "success": True,
                "predicted_class": predicted_class,
                "confidence": confidence,
                "class_index": int(prediction),
                "probabilities": prob_dict,
                "model_info": {
                    "version": self.model_info.get('version', '2.0'),
                    "accuracy": self.model_info.get('accuracy', 0.0),
                    "training_date": self.model_info.get('training_date', 'Unknown')
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Prediction failed: {str(e)}",
                "predicted_class": None,
                "confidence": 0.0,
                "probabilities": {}
            }
    
    def predict_from_file(self, image_path: str) -> Dict:
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            image = cv2.imread(image_path)
            if image is None:
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ PIL
                pil_image = Image.open(image_path)
                image = np.array(pil_image.convert('RGB'))
            
            return self.predict(image)
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to load image: {str(e)}",
                "predicted_class": None,
                "confidence": 0.0,
                "probabilities": {}
            }
    
    def get_model_status(self) -> Dict:
        """‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        return {
            "model_loaded": self.model is not None,
            "scaler_loaded": self.scaler is not None,
            "label_encoder_loaded": self.label_encoder is not None,
            "model_path": str(self.model_path),
            "num_classes": len(self.class_mapping) if self.class_mapping else 0,
            "class_names": list(self.class_mapping.keys()) if self.class_mapping else [],
            "image_size": self.image_size,
            "model_info": self.model_info
        }

# Global classifier instance
updated_classifier = None

def get_updated_classifier() -> UpdatedAmuletClassifier:
    """‡πÑ‡∏î‡πâ classifier instance (singleton pattern)"""
    global updated_classifier
    if updated_classifier is None:
        updated_classifier = UpdatedAmuletClassifier()
        updated_classifier.load_model()
    return updated_classifier

def test_model():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
    print("=== Testing Updated Amulet Classifier ===")
    
    classifier = UpdatedAmuletClassifier()
    success = classifier.load_model()
    
    if success:
        status = classifier.get_model_status()
        print(f"‚úÖ Model Status: {status}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_image = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
        result = classifier.predict(test_image)
        print(f"üîÆ Test Prediction: {result}")
    else:
        print("‚ùå Failed to load model")

if __name__ == "__main__":
    test_model()