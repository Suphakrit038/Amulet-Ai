#!/usr/bin/env python3
"""
Amulet-AI - Setup Models Script
р╕кр╕Др╕гр╕┤р╕Ыр╕Хр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е AI
"""

import os
import sys
import requests
import hashlib
import json
from pathlib import Path
from tqdm import tqdm


def check_existing_models():
    """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з"""
    models_dir = Path("ai_models")
    model_files = [
        models_dir / "amulet_model.h5",
        models_dir / "amulet_model.tflite",
        models_dir / "labels.json"
    ]
    
    existing_files = []
    missing_files = []
    
    for model_file in model_files:
        if model_file.exists():
            existing_files.append(model_file)
        else:
            missing_files.append(model_file)
    
    return existing_files, missing_files


def download_file(url, destination, file_description=None):
    """р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╕Ир╕▓р╕Б URL р╕Юр╕гр╣Йр╕нр╕бр╣Бр╕кр╕Фр╕З progress bar"""
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        # Get file size from headers
        total_size = int(response.headers.get('content-length', 0))
        block_size = 1024  # 1 Kibibyte
        
        desc = file_description if file_description else os.path.basename(destination)
        
        with open(destination, 'wb') as file, tqdm(
            desc=desc,
            total=total_size,
            unit='iB',
            unit_scale=True,
            unit_divisor=1024,
        ) as bar:
            for data in response.iter_content(block_size):
                size = file.write(data)
                bar.update(size)
        
        return True
    except Exception as e:
        print(f"Error downloading {url}: {e}")
        return False


def verify_file_hash(file_path, expected_hash):
    """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╣Вр╕Фр╕вр╣Гр╕Кр╣Й SHA-256"""
    sha256_hash = hashlib.sha256()
    
    with open(file_path, "rb") as f:
        # Read and update hash in chunks for large files
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    
    file_hash = sha256_hash.hexdigest()
    return file_hash == expected_hash


def setup_models():
    """р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е AI"""
    print("ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е AI р╣Гр╕Щр╕гр╕░р╕Ър╕Ъ...")
    
    existing_files, missing_files = check_existing_models()
    
    if existing_files:
        print(f"тЬЕ р╕Юр╕Ър╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з ({len(existing_files)}):")
        for file in existing_files:
            print(f"  - {file}")
    
    if not missing_files:
        print("тЬЕ р╕бр╕╡р╣Вр╕бр╣Ар╕Фр╕ер╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щр╣Бр╕ер╣Йр╕з р╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Ар╕Юр╕┤р╣Ир╕б")
        return True
    
    print(f"тЪая╕П р╕Хр╣Йр╕нр╕Зр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕ер╣Ар╕Юр╕┤р╣Ир╕б ({len(missing_files)}):")
    for file in missing_files:
        print(f"  - {file}")
    
    # URL р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕е (р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З - р╕Хр╣Йр╕нр╕Зр╣Бр╕Бр╣Йр╣Др╕Вр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щ URL р╕Ир╕гр╕┤р╕З)
    model_urls = {
        "amulet_model.h5": "https://example.com/models/amulet_model.h5",
        "amulet_model.tflite": "https://example.com/models/amulet_model.tflite",
        "labels.json": "https://example.com/models/labels.json"
    }
    
    model_hashes = {
        "amulet_model.h5": "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
        "amulet_model.tflite": "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
        "labels.json": "90abcdef1234567890abcdef1234567890abcdef1234567890abcdef12345678"
    }
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М ai_models р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡
    models_dir = Path("ai_models")
    models_dir.mkdir(exist_ok=True)
    
    # р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕╡р╣Ир╕Вр╕▓р╕Ф
    success = True
    for file in missing_files:
        file_name = file.name
        if file_name in model_urls:
            print(f"тмЗя╕П р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф {file_name}...")
            
            if download_file(model_urls[file_name], file, file_name):
                print(f"тЬЕ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф {file_name} р╕кр╕│р╣Ар╕гр╣Зр╕И")
                
                # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ hash
                if verify_file_hash(file, model_hashes[file_name]):
                    print(f"тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ hash р╕Вр╕нр╕З {file_name} р╕кр╕│р╣Ар╕гр╣Зр╕И")
                else:
                    print(f"тЭМ hash р╕Вр╕нр╕З {file_name} р╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Чр╕╡р╣Ир╕Др╕▓р╕Фр╕лр╕зр╕▒р╕З")
                    success = False
            else:
                print(f"тЭМ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф {file_name} р╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И")
                success = False
        else:
            print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ъ URL р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф {file_name}")
            success = False
    
    if success:
        print("тЬЕ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И")
    else:
        print("тЪая╕П р╕бр╕╡р╕Ър╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕╡р╣Ир╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕лр╕гр╕╖р╕нр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И")
    
    return success


def create_dummy_models():
    """р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ"""
    print("ЁЯЫая╕П р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ...")
    
    models_dir = Path("ai_models")
    models_dir.mkdir(exist_ok=True)
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М labels.json
    labels = {
        "0": "р╣Вр╕Юр╕Шр╕┤р╣Мр╕Рр╕▓р╕Щр╕Ър╕▒р╕з",
        "1": "р╕кр╕╡р╕зр╕ер╕╡",
        "2": "р╕кр╕бр╣Ар╕Фр╣Зр╕И",
        "3": "р╕лр╕ер╕зр╕Зр╕Юр╣Ир╕нр╕Бр╕зр╕в"
    }
    
    with open(models_dir / "labels.json", "w", encoding="utf-8") as f:
        json.dump(labels, f, ensure_ascii=False, indent=4)
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ъ amulet_model.h5
    with open(models_dir / "amulet_model.h5", "wb") as f:
        f.write(b"This is a dummy model file for testing purposes only.")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ъ amulet_model.tflite
    with open(models_dir / "amulet_model.tflite", "wb") as f:
        f.write(b"This is a dummy TFLite model file for testing purposes only.")
    
    print("тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И")
    return True


def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б"""
    print("=" * 50)
    print("ЁЯП║ Amulet-AI Model Setup")
    print("=" * 50)
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Юр╕▓р╕гр╕▓р╕бр╕┤р╣Ар╕Хр╕нр╕гр╣М
    if len(sys.argv) > 1 and sys.argv[1] == "--dummy":
        create_dummy_models()
        return
    
    # р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е
    try:
        setup_models()
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")
        print("тЪая╕П р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З: python setup_models.py --dummy")
        return
    
    print("\nЁЯТб р╕Чр╕┤р╕Ы: р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З: python setup_models.py --dummy")


if __name__ == "__main__":
    main()
