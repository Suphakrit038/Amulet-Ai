#!/usr/bin/env python3
"""
üè∫ Amulet-AI Unified Launcher
‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - Backend + Frontend + ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå launcher ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
"""

import subprocess
import time
import os
import sys
import threading
import socket
import signal
import logging
from pathlib import Path
import webbrowser
from datetime import datetime

# ‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πá‡∏≠‡∏Å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('system.log', encoding='utf-8')
    ]
)
logger = logging.getLogger('amulet-launcher')

class AmuletSystemLauncher:
    """
    ‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
    ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á launcher ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
    """
    
    def __init__(self):
        self.processes = []
        self.base_dir = Path(__file__).parent
        self.running = True
        self.config = {
            'api_host': '127.0.0.1',
            'api_port': 8000,
            'frontend_host': '127.0.0.1',
            'frontend_port': 8501,
            'use_real_model': False,
            'open_browser': True
        }
        
    def check_dependencies(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
        required_packages = [
            ('fastapi', 'fastapi'), 
            ('uvicorn', 'uvicorn'), 
            ('streamlit', 'streamlit'), 
            ('requests', 'requests'), 
            ('PIL', 'pillow'), 
            ('numpy', 'numpy')
        ]
        
        missing_packages = []
        
        for import_name, package_name in required_packages:
            try:
                __import__(import_name)
                logger.info(f"‚úÖ {package_name} - OK")
            except ImportError:
                missing_packages.append(package_name)
                logger.error(f"‚ùå {package_name} - Missing")
        
        if missing_packages:
            logger.error(f"Missing packages: {', '.join(missing_packages)}")
            logger.info("Install with: pip install " + " ".join(missing_packages))
            
            # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if input("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower() == 'y':
                try:
                    subprocess.check_call([
                        sys.executable, '-m', 'pip', 'install', *missing_packages
                    ])
                    logger.info("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    return True
                except subprocess.CalledProcessError:
                    logger.error("‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    return False
            return False
        
        return True
    
    def check_ai_model(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        mock_model_files = [
            "ai_models/amulet_model.h5",
            "ai_models/labels.json"
        ]
        
        mock_model_exists = True
        for model_file in mock_model_files:
            full_path = self.base_dir / model_file
            if full_path.exists():
                logger.info(f"‚úÖ {model_file} - Found")
            else:
                logger.warning(f"‚ö†Ô∏è {model_file} - Not found")
                mock_model_exists = False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏£‡∏¥‡∏á
        real_model_files = [
            "ai_models/training_output/step5_final_model.pth",
            "ai_models/training_output/PRODUCTION_MODEL_INFO.json"
        ]
        
        real_model_exists = True
        for model_file in real_model_files:
            full_path = self.base_dir / model_file
            if full_path.exists():
                logger.info(f"‚úÖ {model_file} - Found")
            else:
                logger.warning(f"‚ö†Ô∏è {model_file} - Not found")
                real_model_exists = False
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        if real_model_exists:
            logger.info("üß† Using real AI model")
            self.config['use_real_model'] = True
        else:
            if mock_model_exists:
                logger.info("üß† Using mock AI model")
                self.config['use_real_model'] = False
            else:
                logger.warning("‚ö†Ô∏è No AI models found, using mock data")
                self.config['use_real_model'] = False
        
        return mock_model_exists or real_model_exists
    
    def wait_for_service(self, host, port, name, max_attempts=30):
        """‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        logger.info(f"‚è≥ Waiting for {name} on {host}:{port}...")
        
        for attempt in range(max_attempts):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex((host, int(port)))
                    if result == 0:
                        logger.info(f"‚úÖ {name} is ready!")
                        return True
            except:
                pass
            
            time.sleep(1)
            logger.info(f"‚è≥ Attempt {attempt + 1}/{max_attempts}...")
        
        logger.error(f"‚ùå {name} failed to start within timeout")
        return False
    
    def get_python_executable(self):
        """‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Python executable ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö virtual environment ‡∏Å‡πà‡∏≠‡∏ô
        if sys.prefix != sys.base_prefix:
            # ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô virtual environment
            return sys.executable
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö virtual environment ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        venv_paths = [
            Path(".venv/Scripts/python.exe"),  # Windows
            Path(".venv/bin/python"),          # Linux/Mac
            Path("venv/Scripts/python.exe"),   # Windows alternative
            Path("venv/bin/python")            # Linux/Mac alternative
        ]
        
        for venv_path in venv_paths:
            if venv_path.exists():
                return str(venv_path)
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ venv ‡πÉ‡∏ä‡πâ python ‡∏õ‡∏Å‡∏ï‡∏¥
        return sys.executable
    
    def start_backend_api(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Backend API"""
        logger.info("üöÄ Starting Backend API...")
        
        python_exe = self.get_python_executable()
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏• API ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        if self.config['use_real_model']:
            api_module = "backend.api_with_real_model:app"
            port = "8001"
        else:
            api_module = "backend.api:app"
            port = "8000"
        
        self.config['api_port'] = port
        
        cmd = [
            python_exe, "-m", "uvicorn", 
            api_module,
            "--host", self.config['api_host'],
            "--port", port,
            "--reload"
        ]
        
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            self.processes.append(('Backend API', process))
            logger.info(f"‚úÖ Backend API process started on port {port}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to start Backend API: {e}")
            return False
    
    def start_frontend(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Frontend"""
        logger.info("üé® Starting Frontend...")
        
        python_exe = self.get_python_executable()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå frontend
        frontend_files = [
            "frontend/app_streamlit.py",
            "frontend/app_straemlit.py"  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î
        ]
        
        frontend_file = None
        for file in frontend_files:
            if Path(file).exists():
                frontend_file = file
                break
        
        if not frontend_file:
            logger.error("‚ùå Frontend file not found")
            return False
        
        cmd = [
            python_exe, "-m", "streamlit", "run",
            frontend_file,
            "--server.port", str(self.config['frontend_port']),
            "--server.address", self.config['frontend_host']
        ]
        
        try:
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            self.processes.append(('Frontend', process))
            logger.info("‚úÖ Frontend process started")
            return True
        except Exception as e:
            logger.error(f"‚ùå Failed to start Frontend: {e}")
            return False
    
    def open_web_browser(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        if not self.config['open_browser']:
            return
        
        frontend_url = f"http://{self.config['frontend_host']}:{self.config['frontend_port']}"
        
        logger.info(f"üåê Opening web browser: {frontend_url}")
        try:
            time.sleep(3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ frontend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            webbrowser.open(frontend_url)
        except Exception as e:
            logger.error(f"‚ùå Failed to open web browser: {e}")
    
    def test_api_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API"""
        logger.info("üß™ Testing API connection...")
        
        api_url = f"http://{self.config['api_host']}:{self.config['api_port']}"
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health check
            import requests
            response = requests.get(f"{api_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ API Health: {data}")
                return True
            else:
                logger.error(f"‚ùå API Health check failed: {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå API connection test failed: {e}")
            return False
    
    def monitor_processes(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™"""
        while self.running:
            try:
                for name, process in self.processes:
                    if process.poll() is not None:
                        logger.error(f"‚ùå {name} process has stopped!")
                        return False
                
                time.sleep(5)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except KeyboardInterrupt:
                logger.info("üõë Received interrupt signal")
                break
        
        return True
    
    def stop_all_processes(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™"""
        logger.info("üõë Stopping all processes...")
        
        self.running = False
        
        for name, process in self.processes:
            try:
                logger.info(f"Stopping {name}...")
                process.terminate()
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                try:
                    process.wait(timeout=5)
                    logger.info(f"‚úÖ {name} stopped gracefully")
                except subprocess.TimeoutExpired:
                    logger.warning(f"‚ö†Ô∏è Force killing {name}")
                    process.kill()
                    process.wait()
                    
            except Exception as e:
                logger.error(f"‚ùå Error stopping {name}: {e}")
        
        logger.info("‚úÖ All processes stopped")
    
    def print_system_info(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\n" + "="*60)
        print("üè∫ AMULET-AI SYSTEM")
        print("="*60)
        print(f"üìÖ Launch Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ Base Directory: {self.base_dir}")
        print(f"üêç Python: {sys.version.split()[0]}")
        print(f"ü§ñ AI Mode: {'Real AI Model' if self.config['use_real_model'] else 'Mock Data'}")
        print("="*60)
        print("üåê URLs:")
        print(f"  Backend API:  http://{self.config['api_host']}:{self.config['api_port']}")
        print(f"  API Docs:     http://{self.config['api_host']}:{self.config['api_port']}/docs")
        print(f"  Frontend:     http://{self.config['frontend_host']}:{self.config['frontend_port']}")
        print("="*60)
        print("‚å®Ô∏è Controls:")
        print("  Ctrl+C:       Stop all services")
        print("="*60)
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
            self.print_system_info()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
            logger.info("üîç Checking dependencies...")
            if not self.check_dependencies():
                logger.error("‚ùå Missing dependencies. Please install required packages.")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
            logger.info("üß† Checking AI model...")
            self.check_ai_model()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° backend API
            if not self.start_backend_api():
                logger.error("‚ùå Failed to start backend")
                return False
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if not self.wait_for_service(self.config['api_host'], self.config['api_port'], "Backend API"):
                logger.error("‚ùå API not responding")
                self.stop_all_processes()
                return False
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API
            if not self.test_api_connection():
                logger.warning("‚ö†Ô∏è API connection test failed, but continuing...")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend
            if not self.start_frontend():
                logger.error("‚ùå Failed to start frontend")
                self.stop_all_processes()
                return False
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ frontend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if not self.wait_for_service(self.config['frontend_host'], self.config['frontend_port'], "Frontend"):
                logger.error("‚ùå Frontend not responding")
                self.stop_all_processes()
                return False
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            browser_thread = threading.Thread(target=self.open_web_browser)
            browser_thread.daemon = True
            browser_thread.start()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            print("\nüéâ SYSTEM READY!")
            print(f"‚úÖ Backend API: http://{self.config['api_host']}:{self.config['api_port']}")
            print(f"‚úÖ Frontend:    http://{self.config['frontend_host']}:{self.config['frontend_port']}")
            print(f"üìñ API Docs:   http://{self.config['api_host']}:{self.config['api_port']}/docs")
            print("\nüí° The system is now running. Access the frontend to use Amulet-AI!")
            print("üõë Press Ctrl+C to stop all services\n")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
            self.monitor_processes()
            
        except KeyboardInterrupt:
            logger.info("üõë Received shutdown signal")
        except Exception as e:
            logger.error(f"‚ùå System error: {e}")
        finally:
            self.stop_all_processes()


def signal_handler(sig, frame):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    print("\nüõë Received interrupt signal. Shutting down...")
    sys.exit(0)


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    
    launcher = AmuletSystemLauncher()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if len(sys.argv) > 1:
        if sys.argv[1] == '--test':
            # ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
            if launcher.check_dependencies():
                launcher.check_ai_model()
                launcher.print_system_info()
                logger.info("‚úÖ System check complete")
            return
        elif sys.argv[1] == '--api-only':
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ API
            launcher.start_backend_api()
            launcher.wait_for_service(launcher.config['api_host'], launcher.config['api_port'], "Backend API")
            launcher.test_api_connection()
            launcher.monitor_processes()
            return
        elif sys.argv[1] == '--real-model':
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏£‡∏¥‡∏á
            launcher.config['use_real_model'] = True
            logger.info("üß† Using real AI model")
        elif sys.argv[1] == '--no-browser':
            # ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            launcher.config['open_browser'] = False
            logger.info("üåê Automatic browser opening disabled")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    launcher.run()


if __name__ == "__main__":
    main()
