#!/usr/bin/env python3
"""
Amulet-AI System Launcher
‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path
import logging

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AmuletAILauncher:
    """‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.frontend_port = 8501
        self.backend_port = 8001
        
    def check_python_environment(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python environment"""
        logger.info("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python environment...")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
        if sys.version_info < (3, 8):
            logger.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Python 3.8 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
            return False
        
        logger.info(f"‚úÖ Python {sys.version}")
        return True
    
    def install_requirements(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"""
        logger.info("üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
        
        requirements_files = [
            "requirements.txt",
            "ai_models/configs/requirements_advanced.txt"
        ]
        
        for req_file in requirements_files:
            req_path = self.project_root / req_file
            if req_path.exists():
                try:
                    subprocess.run([
                        sys.executable, '-m', 'pip', 'install', '-r', str(req_path)
                    ], check=True, capture_output=True)
                    logger.info(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {req_file} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except subprocess.CalledProcessError as e:
                    logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {req_file}: {e}")
        
        return True
    
    def setup_directories(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        logger.info("üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô...")
        
        directories = [
            "logs",
            "uploads", 
            "frontend/assets/css",
            "frontend/assets/js",
            "backend/logs",
            "ai_models/saved_models"
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ {directory}")
        
        return True
    
    def check_backend_available(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        backend_script = self.project_root / "backend" / "api_with_real_model.py"
        return backend_script.exists()
    
    def start_backend(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° backend server"""
        if not self.check_backend_available():
            logger.warning("‚ö†Ô∏è Backend ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏à‡∏∞‡πÉ‡∏ä‡πâ mock data")
            return True
        
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° backend server...")
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° backend ‡πÅ‡∏ö‡∏ö detached process
            cmd = [
                sys.executable, '-m', 'uvicorn',
                'backend.api_with_real_model:app',
                '--host', '0.0.0.0',
                '--port', str(self.backend_port),
                '--reload'
            ]
            
            subprocess.Popen(
                cmd,
                cwd=self.project_root,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ backend ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            for i in range(10):
                try:
                    response = requests.get(f"http://localhost:{self.backend_port}/health", timeout=2)
                    if response.status_code == 200:
                        logger.info(f"‚úÖ Backend ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port {self.backend_port}")
                        return True
                except:
                    time.sleep(2)
            
            logger.warning("‚ö†Ô∏è Backend ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° backend: {e}")
            return True  # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ backend
    
    def start_frontend(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° frontend Streamlit"""
        logger.info("üé® ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend...")
        
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô)
        frontend_options = [
            self.project_root / "frontend" / "app_old_style.py",  # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° (‡πÉ‡∏´‡∏°‡πà)
            self.project_root / "frontend" / "app_streamlit.py",  # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            self.project_root / "frontend" / "app_simple.py",    # ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            self.project_root / "frontend" / "app_modern.py",    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á
        ]
        
        frontend_script = None
        for option in frontend_options:
            if option.exists():
                frontend_script = option
                logger.info(f"üì± ‡πÉ‡∏ä‡πâ frontend: {option.name}")
                break
        
        if not frontend_script:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå frontend")
            return False
        
        try:
            cmd = [
                sys.executable, '-m', 'streamlit', 'run',
                str(frontend_script),
                '--server.port', str(self.frontend_port),
                '--server.address', '0.0.0.0',
                '--browser.gatherUsageStats', 'false'
            ]
            
            logger.info(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:{self.frontend_port}")
            subprocess.run(cmd, cwd=self.project_root)
            
        except KeyboardInterrupt:
            logger.info("üõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend: {e}")
            return False
        
        return True
    
    def launch(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        logger.info("üîÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI...")
        
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment
            if not self.check_python_environment():
                return False
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            self.setup_directories()
            
            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
            self.install_requirements()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° backend
            self.start_backend()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend
            self.start_frontend()
            
            return True
            
        except KeyboardInterrupt:
            logger.info("üõë ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            return False
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("""
    üîÆ Amulet-AI System Launcher
    ============================
    ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå
    
    """)
    
    launcher = AmuletAILauncher()
    success = launcher.launch()
    
    if success:
        print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
        sys.exit(1)


if __name__ == "__main__":
    main()
