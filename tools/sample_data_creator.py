#!/usr/bin/env python3
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
"""

import numpy as np
import cv2
from pathlib import Path

def create_sample_images():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á dataset
    dataset_dir = Path("dataset")
    classes = ["phra_somdej", "phra_nang_phya", "phra_rod"]
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠ class (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 300+ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ PCA ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
    n_images = {
        "phra_somdej": 150,  # ‡∏°‡∏≤‡∏Å
        "phra_nang_phya": 100,  # ‡∏Å‡∏•‡∏≤‡∏á
        "phra_rod": 50   # ‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö augmentation)
    }
    
    for class_name in classes:
        class_dir = dataset_dir / class_name
        class_dir.mkdir(exist_ok=True)
        
        for i in range(n_images[class_name]):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (224x224 RGB)
            if class_name == "phra_somdej":
                # ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞ - ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Å‡∏±‡∏ö‡∏ß‡∏á‡∏Å‡∏•‡∏°
                img = np.ones((224, 224, 3), dtype=np.uint8) * 200
                cv2.rectangle(img, (50, 50), (174, 174), (100, 150, 200), -1)
                cv2.circle(img, (112, 112), 30, (50, 100, 150), -1)
                
            elif class_name == "phra_nang_phya":
                # ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞ - ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô
                img = np.ones((224, 224, 3), dtype=np.uint8) * 180
                pts = np.array([[112, 50], [50, 174], [174, 174]], np.int32)
                cv2.fillPoly(img, [pts], (150, 100, 200))
                cv2.line(img, (50, 200), (174, 200), (100, 50, 150), 5)
                
            else:  # phra_rod
                # ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞ - ‡∏ß‡∏á‡∏£‡∏µ‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î
                img = np.ones((224, 224, 3), dtype=np.uint8) * 160
                cv2.ellipse(img, (112, 112), (80, 50), 0, 0, 360, (200, 150, 100), -1)
                cv2.circle(img, (112, 112), 10, (50, 150, 100), -1)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° noise ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
            noise = np.random.randint(-20, 20, img.shape, dtype=np.int16)
            img = np.clip(img.astype(np.int16) + noise, 0, 255).astype(np.uint8)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
            img_path = class_dir / f"{class_name}_{i:03d}.jpg"
            cv2.imwrite(str(img_path), img)
        
        print(f"‚úÖ Created {n_images[class_name]} images for {class_name}")
    
    print(f"\nüìä Dataset created with imbalanced classes:")
    for class_name, count in n_images.items():
        print(f"   {class_name}: {count} images")

if __name__ == "__main__":
    create_sample_images()