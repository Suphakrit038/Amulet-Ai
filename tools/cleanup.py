#!/usr/bin/env python3
"""
Amulet-AI Cleanup Script
‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
"""

import os
import shutil
import sys
from pathlib import Path

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("=" * 60)
    print("üßπ Amulet-AI Cleanup Script")
    print("=" * 60)
    
    # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    essential_files = [
        "amulet_launcher.py",
        "amulet_launcher.bat",
        "setup_models.py",
        "README.md",
        "requirements.txt",
        "config.json",
        "cleanup.py"
    ]
    
    # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    essential_folders = [
        ".git",
        ".venv",
        "ai_models",
        "backend",
        "frontend",
        "utils",
        "docs",
        "logs",
        "tests",
        "archive",
        "dataset",
        "dataset_organized",
        "dataset_split",
        "training_output"
    ]
    
    base_dir = Path.cwd()
    archive_dir = base_dir / "archive" / "old_files"
    archive_dir.mkdir(parents=True, exist_ok=True)
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    unnecessary_files = []
    for item in base_dir.iterdir():
        if item.is_file() and item.name not in essential_files:
            unnecessary_files.append(item)
    
    if not unnecessary_files:
        print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å")
        return
    
    print(f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô {len(unnecessary_files)} ‡πÑ‡∏ü‡∏•‡πå:")
    for file in unnecessary_files:
        print(f"  - {file.name}")
    
    choice = input("\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?\n"
                  "1) ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà archive/old_files\n"
                  "2) ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á\n"
                  "3) ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\n"
                  "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2/3): ")
    
    if choice == "1":
        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà archive
        for file in unnecessary_files:
            try:
                dest = archive_dir / file.name
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡πÉ‡∏ô archive
                if dest.exists():
                    dest = archive_dir / f"{file.stem}_old{file.suffix}"
                
                shutil.move(str(file), str(dest))
                print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ {file.name} ‡πÑ‡∏õ‡∏ó‡∏µ‡πà {dest.relative_to(base_dir)}")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢ {file.name}: {e}")
        
        print("\n‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    elif choice == "2":
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        confirm = input("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ? (y/n): ")
        if confirm.lower() == "y":
            for file in unnecessary_files:
                try:
                    file.unlink()
                    print(f"‚úÖ ‡∏•‡∏ö {file.name}")
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {file.name}: {e}")
            
            print("\n‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    
    else:
        print("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")


if __name__ == "__main__":
    main()
