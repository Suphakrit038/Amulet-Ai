#!/usr/bin/env python3
"""
Production-Ready Frontend for Amulet-AI
‡∏£‡∏∞‡∏ö‡∏ö Frontend ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ component ‡πÅ‡∏ö‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≤‡∏£‡πå
"""

import streamlit as st
import os
import sys
import requests
import time
import numpy as np
from PIL import Image
from pathlib import Path
from datetime import datetime

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import components and utils
try:
    from frontend.components.image_display import ImageDisplayComponent
    from frontend.components.analysis_results import AnalysisResultsComponent
    from frontend.components.file_uploader import FileUploaderComponent
    from frontend.components.mode_selector import ModeSelectorComponent
    from frontend.utils.image_processor import ImagePreprocessor
    from frontend.utils.file_validator import FileValidator
except ImportError as e:
    st.error(f"Import error: {e}")
    st.stop()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="Amulet-AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Configuration
API_BASE_URL = "http://localhost:8000"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# Theme Colors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢‡∏ò‡∏µ‡∏°
THEME_COLORS = {
    'primary': '#800000',   # ‡πÅ‡∏î‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏°‡∏π
    'accent': '#B8860B',    # ‡∏ó‡∏≠‡∏á (dark goldenrod)
    'gold': '#D4AF37',      # ‡∏ó‡∏≠‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á
    'success': '#10b981',
    'warning': '#f59e0b',
    'error': '#ef4444',
    'info': '#3b82f6'
}

def load_css():
    """Load CSS from external file with enhanced Thai styling"""
    css_file = os.path.join(os.path.dirname(__file__), 'style.css')
    
    # Enhanced CSS with Thai theme
    enhanced_css = f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700;800&display=swap');
    
    .stApp {{
        font-family: 'Prompt', 'Segoe UI', sans-serif;
        background: linear-gradient(135deg, #f8f5f0 0%, #ffffff 50%, #faf7f2 100%);
    }}
    
    .main-header {{
        background: linear-gradient(135deg, {THEME_COLORS['primary']} 0%, {THEME_COLORS['accent']} 100%);
        padding: 3rem 2rem;
        border-radius: 20px;
        margin-bottom: 2rem;
        color: white;
        text-align: center;
        box-shadow: 0 8px 32px rgba(128, 0, 0, 0.3);
        position: relative;
        overflow: hidden;
    }}
    
    .main-header::before {{
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        animation: float 6s ease-in-out infinite;
    }}
    
    @keyframes float {{
        0%, 100% {{ transform: translateY(0px) rotate(0deg); }}
        50% {{ transform: translateY(-10px) rotate(5deg); }}
    }}
    
    .feature-card {{
        background: rgba(255, 255, 255, 0.95);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(128, 0, 0, 0.1);
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }}
    
    .feature-card:hover {{
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(128, 0, 0, 0.2);
    }}
    
    .glass-card {{
        background: rgba(255, 255, 255, 0.85);
        border: 1px solid rgba(128, 0, 0, 0.15);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(128, 0, 0, 0.2);
        margin-bottom: 2rem;
    }}
    
    .status-indicator {{
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }}
    
    .status-online {{
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
        color: #059669;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }}
    
    .status-offline {{
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
        color: #dc2626;
        border: 1px solid rgba(239, 68, 68, 0.3);
    }}
    
    .upload-section {{
        background: linear-gradient(135deg, rgba(128, 0, 0, 0.05) 0%, rgba(184, 134, 11, 0.05) 100%);
        padding: 3rem 2rem;
        border-radius: 20px;
        border: 2px dashed {THEME_COLORS['primary']};
        text-align: center;
        margin: 2rem 0;
        transition: all 0.3s ease;
    }}
    
    .upload-section:hover {{
        border-color: {THEME_COLORS['accent']};
        background: linear-gradient(135deg, rgba(128, 0, 0, 0.08) 0%, rgba(184, 134, 11, 0.08) 100%);
    }}
    
    .stButton > button {{
        background: linear-gradient(135deg, {THEME_COLORS['primary']} 0%, {THEME_COLORS['accent']} 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: 0 4px 20px rgba(128, 0, 0, 0.3);
        transition: all 0.3s ease;
    }}
    
    .stButton > button:hover {{
        transform: translateY(-2px);
        box-shadow: 0 8px 30px rgba(128, 0, 0, 0.4);
    }}
    
    .logo-container {{
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 2rem;
        background: rgba(255, 255, 255, 0.9);
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }}
    
    .logo-img {{
        height: 80px;
        max-width: 200px;
        object-fit: contain;
        border-radius: 10px;
        padding: 10px;
        background: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }}
    
    .logo-img:hover {{
        transform: scale(1.05);
    }}
    
    .metric-card {{
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border-left: 4px solid {THEME_COLORS['primary']};
        margin: 1rem 0;
    }}
    
    .section-divider {{
        height: 2px;
        background: linear-gradient(90deg, {THEME_COLORS['primary']} 0%, {THEME_COLORS['accent']} 50%, {THEME_COLORS['primary']} 100%);
        margin: 3rem 0;
        border-radius: 1px;
    }}
    </style>
    """
    
    # Try to load external CSS file
    if os.path.exists(css_file):
        try:
            with open(css_file, 'r', encoding='utf-8') as f:
                external_css = f.read()
            st.markdown(f'<style>{external_css}</style>', unsafe_allow_html=True)
        except:
            pass
    
    # Apply enhanced CSS
    st.markdown(enhanced_css, unsafe_allow_html=True)

class AmuletFrontend:
    """Enhanced Frontend class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API communication ‡πÅ‡∏•‡∏∞ cache management"""
    
    def __init__(self):
        self.base_url = API_BASE_URL
        if 'api_cache' not in st.session_state:
            st.session_state.api_cache = {}
    
    def check_api_health(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API ‡∏û‡∏£‡πâ‡∏≠‡∏° cache"""
        try:
            # Check cache first
            cache_key = 'api_health_check'
            if cache_key in st.session_state.api_cache:
                cached_result, timestamp = st.session_state.api_cache[cache_key]
                # Cache for 30 seconds
                if (datetime.now() - timestamp).seconds < 30:
                    return cached_result
            
            response = requests.get(f"{self.base_url}/health", timeout=5)
            result = response.status_code == 200
            
            # Store in cache
            st.session_state.api_cache[cache_key] = (result, datetime.now())
            return result
        except:
            return False
    
    def get_classes_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å API"""
        try:
            response = requests.get(f"{self.base_url}/classes", timeout=10)
            if response.status_code == 200:
                return response.json()
            return None
        except:
            return None
    
    def predict_image(self, front_image, back_image=None, enhance=True):
        """‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        try:
            files = {}
            
            # Prepare front image
            if front_image:
                files['front_image'] = ('front.jpg', front_image.getvalue(), 'image/jpeg')
            
            # Prepare back image if provided
            if back_image:
                files['back_image'] = ('back.jpg', back_image.getvalue(), 'image/jpeg')
            
            # Additional parameters
            data = {
                'enhance': str(enhance).lower(),
                'analysis_type': 'dual' if back_image else 'single'
            }
            
            response = requests.post(
                f"{self.base_url}/predict",
                files=files,
                data=data,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"API Error: {response.status_code}"}
                
        except Exception as e:
            return {"error": f"Connection Error: {str(e)}"}

def embed_logos():
    """‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå"""
    logo_dir = os.path.join(os.path.dirname(__file__), 'imgae')
    
    if os.path.exists(logo_dir):
        st.markdown("""
        <div class="logo-container">
            <h4 style="color: #800000; margin: 0; width: 100%; text-align: center;">
                ü§ù Partnership & Supported by
            </h4>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        logo_files = ['LogoDEPA-01.png', 'Logo Thai-Austrain.gif', 'Amulet-AI_logo.png']
        logo_names = ['DEPA', 'Thai-Austrian University', 'Amulet-AI Research']
        
        for col, logo_file, name in zip([col1, col2, col3], logo_files, logo_names):
            logo_path = os.path.join(logo_dir, logo_file)
            if os.path.exists(logo_path):
                with col:
                    st.image(logo_path, caption=name, use_column_width=True)

def main():
    # Load CSS ‡πÅ‡∏•‡∏∞ styling
    load_css()
    
    # Initialize components
    image_display = ImageDisplayComponent()
    analysis_results = AnalysisResultsComponent()
    file_uploader = FileUploaderComponent(MAX_FILE_SIZE)
    mode_selector = ModeSelectorComponent()
    frontend = AmuletFrontend()
    
    # Initialize session state
    if 'analysis_mode' not in st.session_state:
        st.session_state.analysis_mode = 'dual'
    if 'analysis_history' not in st.session_state:
        st.session_state.analysis_history = []
    
    # Check API health
    api_healthy = frontend.check_api_health()
    
    # ==========================================================
    # Header Section with Thai Design
    # ==========================================================
    
    st.markdown(f"""
    <div class="main-header">
        <div style="position: relative; z-index: 2;">
            <h1 style="font-size: 3.5rem; font-weight: 800; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                üîÆ Amulet-AI
            </h1>
            <h2 style="font-size: 1.8rem; margin: 1rem 0; opacity: 0.95; font-weight: 600;">
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå
            </h2>
            <p style="font-size: 1.2rem; margin: 1rem 0; opacity: 0.9; line-height: 1.6;">
                ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ Deep Learning ‡πÅ‡∏•‡∏∞ Computer Vision ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢<br>
                ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
            </p>
            <div style="margin-top: 2rem;">
                <span style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.9rem;">
                    ‚ö° ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ | üéØ ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á | üîí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                </span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # API Status Section
    status_class = "status-online" if api_healthy else "status-offline"
    status_text = "API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if api_healthy else "API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    status_icon = "üü¢" if api_healthy else "üî¥"
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(f"""
        <div style="text-align: center; margin: 2rem 0;">
            <span class="status-indicator {status_class}">
                {status_icon} {status_text}
            </span>
        </div>
        """, unsafe_allow_html=True)
    
    # Logo Section
    embed_logos()
    
    # Section Divider
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # ==========================================================
    # Features Section with Enhanced Cards
    # ==========================================================
    
    st.markdown("## ‚ú® ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="feature-card">
            <div style="text-align: center; margin-bottom: 1rem;">
                <div style="font-size: 3rem; color: {THEME_COLORS['primary']};">üéØ</div>
            </div>
            <h4 style="color: {THEME_COLORS['primary']}; text-align: center; margin: 1rem 0;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á 94.5%</h4>
            <p style="text-align: center; color: #666; line-height: 1.6;">
                ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50,000 ‡∏£‡∏π‡∏õ
                ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="feature-card">
            <div style="text-align: center; margin-bottom: 1rem;">
                <div style="font-size: 3rem; color: {THEME_COLORS['accent']};">‚ö°</div>
            </div>
            <h4 style="color: {THEME_COLORS['accent']}; text-align: center; margin: 1rem 0;">‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡πá‡∏ß &lt; 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</h4>
            <p style="text-align: center; color: #666; line-height: 1.6;">
                ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
                ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Real-time
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="feature-card">
            <div style="text-align: center; margin-bottom: 1rem;">
                <div style="font-size: 3rem; color: {THEME_COLORS['success']};">üìä</div>
            </div>
            <h4 style="color: {THEME_COLORS['success']}; text-align: center; margin: 1rem 0;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h4>
            <p style="text-align: center; color: #666; line-height: 1.6;">
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
                ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Section Divider
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # ==========================================================
    # Mode Selection Section
    # ==========================================================
    
    st.markdown("## üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    # Use component for mode selection
    selected_mode = mode_selector.display_mode_selector()
    if selected_mode:
        st.session_state.analysis_mode = selected_mode
        mode_selector.display_mode_info(selected_mode)
    else:
        mode_selector.display_mode_info(st.session_state.analysis_mode)
    
    # ==========================================================
    # File Upload Section
    # ==========================================================
    
    st.markdown("## üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    
    # Display upload tips
    file_uploader.display_upload_tips(st.session_state.analysis_mode)
    
    # File upload based on mode
    front_image = None
    back_image = None
    
    # Use dual image uploader (since we removed single mode)
    front_image, back_image = file_uploader.dual_image_uploader()
    
    # Display uploaded images with enhanced info
    if front_image:
        st.markdown("### üì∑ ‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        image_display.display_uploaded_image(front_image, "‡∏´‡∏ô‡πâ‡∏≤", MAX_FILE_SIZE)
    
    if back_image:
        st.markdown("### üì∑ ‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        image_display.display_uploaded_image(back_image, "‡∏´‡∏•‡∏±‡∏á", MAX_FILE_SIZE)
    
    # ==========================================================
    # Analysis Section
    # ==========================================================
    
    # Check if we can analyze
    can_analyze = front_image is not None and back_image is not None
    
    if can_analyze:
        st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
        
        # Analysis options
        col1, col2 = st.columns([3, 1])
        with col1:
            analyze_button = st.button(
                "üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", 
                type="primary", 
                use_container_width=True,
                help="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI"
            )
        with col2:
            auto_enhance = st.checkbox("‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", value=True, help="‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        
        # Perform analysis
        if analyze_button:
            st.markdown("## üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                # Try real API first, then fallback to mock
                if api_healthy:
                    result = frontend.predict_image(front_image, back_image, auto_enhance)
                else:
                    # Mock result for demo
                    time.sleep(2)
                    thai_names = ['‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á', '‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤', '‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å', '‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∏‡∏ó‡∏ò‡∏Ñ‡∏∏‡∏ì', '‡∏û‡∏£‡∏∞‡πÑ‡∏≠‡∏¢‡πå‡πÑ‡∏Ç‡πà']
                    result = {
                        'thai_name': np.random.choice(thai_names),
                        'confidence': np.random.uniform(0.75, 0.95),
                        'predicted_class': f'class_{np.random.randint(1, 6)}',
                        'analysis_type': 'dual_image',
                        'processing_time': np.random.uniform(1.2, 2.5),
                        'enhanced_features': {
                            'image_quality': {
                                'overall_score': np.random.uniform(0.7, 0.95),
                                'quality_level': np.random.choice(['good', 'excellent']),
                                'was_enhanced': auto_enhance
                            }
                        }
                    }
                
                # Display results using component
                analysis_results.display_results(result, st.session_state.analysis_mode, show_details=True)
                
                # Add to history
                if 'error' not in result:
                    st.session_state.analysis_history.append({
                        'timestamp': datetime.now(),
                        'result': result,
                        'mode': st.session_state.analysis_mode
                    })
    else:
        st.markdown("""
        <div class="upload-section">
            <h3 style="color: #800000; margin-bottom: 1rem;">üìã ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?</h3>
            <p style="color: #666; font-size: 1.1rem;">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏•‡∏±‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI
            </p>
            <p style="color: #888; font-size: 0.9rem; margin-top: 1rem;">
                üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏µ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # ==========================================================
    # Analysis History Section
    # ==========================================================
    
    if st.session_state.analysis_history:
        st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
        st.markdown("## üìö ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        with st.expander(f"‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ({len(st.session_state.analysis_history)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", expanded=False):
            for i, record in enumerate(reversed(st.session_state.analysis_history[-5:])):  # Show last 5
                st.markdown(f"""
                <div class="metric-card">
                    <strong>‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {len(st.session_state.analysis_history) - i}</strong> - 
                    {record['timestamp'].strftime('%H:%M:%S')} | 
                    {record['result'].get('thai_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} 
                    ({record['result'].get('confidence', 0):.1%})
                </div>
                """, unsafe_allow_html=True)
    
    # ==========================================================
    # Tips and Information Section
    # ==========================================================
    
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    st.markdown("## üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        with st.expander("üì∏ ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ", expanded=False):
            st.markdown("""
            ### ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            - **‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á**: ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏£‡∏á‡∏à‡πâ‡∏≤
            - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î**: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠ ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
            - **‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á**: ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏á‡∏Ñ‡πå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏î‡∏ö‡∏±‡∏á
            - **‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á**: ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏ß‡∏î‡∏•‡∏≤‡∏¢‡∏£‡∏ö‡∏Å‡∏ß‡∏ô
            - **‡∏Ç‡∏ô‡∏≤‡∏î**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 300x300 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
            
            ### ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            - ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ü‡∏•‡∏ä ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏™‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô
            - ‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            """)
    
    with col2:
        with st.expander("üîç ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", expanded=False):
            st.markdown("""
            ### ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            - **Dual Image Analysis**: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            - **Deep Learning**: ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ CNN ‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
            - **Computer Vision**: ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
            
            ### ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            - **Confidence Score**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô 0-100%
            - **>90%**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            - **70-90%**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            - **<70%**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
            
            ### ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            - ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            - ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
            """)
    
    # ==========================================================
    # Footer Section
    # ==========================================================
    
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, {THEME_COLORS['primary']} 0%, {THEME_COLORS['accent']} 100%);
                color: white; padding: 2rem; border-radius: 15px; text-align: center; margin-top: 3rem;">
        <h3 style="margin: 0 0 1rem 0;">üîÆ Amulet-AI Project</h3>
        <p style="margin: 0; opacity: 0.9; font-size: 1rem;">
            ¬© 2025 Amulet-AI | Powered by Advanced AI Technology
        </p>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.8; font-size: 0.9rem;">
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏ß‡∏¥‡∏à‡∏±‡∏¢ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÅ‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢
        </p>
        <div style="margin-top: 1rem; opacity: 0.7; font-size: 0.8rem;">
            Partnership: DEPA ‚Ä¢ Thai-Austrian University ‚Ä¢ Amulet-AI Research Team
        </div>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()