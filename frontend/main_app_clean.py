#!/usr/bin/env python3
"""
üîÆ Amulet-AI - Production Frontend
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
Thai Amulet Classification System

Modern Clean Implementation
"""

import streamlit as st
import requests
import numpy as np
from PIL import Image
import json
import time
import base64
from pathlib import Path
import sys
import os
from datetime import datetime
import io

# Configuration
st.set_page_config(
    page_title="üîÆ Amulet-AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Constants
API_BASE_URL = "http://localhost:8000"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# Theme Colors (Thai Traditional)
COLORS = {
    'primary': '#8B4513',      # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏≠‡∏á
    'secondary': '#DAA520',    # ‡∏™‡∏µ‡∏ó‡∏≠‡∏á
    'accent': '#FF6347',       # ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á
    'success': '#32CD32',      # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    'warning': '#FFD700',      # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á
    'error': '#DC143C',        # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    'info': '#4682B4',         # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
    'dark': '#2F4F4F',         # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
    'light': '#F5F5DC'         # ‡∏™‡∏µ‡∏Ñ‡∏£‡∏µ‡∏°
}

# Custom CSS - Clean and Modern
st.markdown("""
<style>
    /* Import Thai Font */
    @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap');
    
    /* Global Styles */
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Prompt', sans-serif;
    }
    
    /* Hide Streamlit Elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Main Header */
    .main-header {
        background: linear-gradient(90deg, #8B4513 0%, #DAA520 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(139, 69, 19, 0.3);
    }
    
    .main-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .main-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        font-weight: 400;
    }
    
    /* Cards */
    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 5px solid #DAA520;
    }
    
    .upload-card {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        text-align: center;
        margin: 2rem 0;
        border: 2px dashed #DAA520;
    }
    
    .result-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 6px 25px rgba(0,0,0,0.15);
        margin: 1rem 0;
        max-width: 1200px;
        width: 98vw;
        margin: 0 auto;
    }
    
    /* Buttons */
    .stButton > button {
        background: linear-gradient(45deg, #8B4513 0%, #DAA520 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(139, 69, 19, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(139, 69, 19, 0.4);
    }
    
    /* Progress Bar */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #8B4513 0%, #DAA520 100%);
    }
    
    /* Metrics */
    .metric-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    /* Status Messages */
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #28a745;
        margin: 1rem 0;
    }
    
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #dc3545;
        margin: 1rem 0;
    }
    
    .warning-message {
        background: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #ffc107;
        margin: 1rem 0;
    }
    
    /* Image Display */
    .image-container {
        text-align: center;
        margin: 1rem 0;
    }
    
    .image-container img {
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        max-width: 100%;
        height: auto;
    }
    
    /* Animation */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }
    
    /* Thai Text */
    .thai-text {
        font-family: 'Prompt', sans-serif;
        line-height: 1.6;
    }
    
    /* Loading Spinner */
    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #DAA520;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
""", unsafe_allow_html=True)

# Helper Functions
def encode_image_to_base64(image):
    """Convert PIL Image to base64 string"""
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return img_str

def resize_image(image, max_size=800):
    """Resize image while maintaining aspect ratio"""
    width, height = image.size
    if max(width, height) > max_size:
        if width > height:
            new_width = max_size
            new_height = int(height * max_size / width)
        else:
            new_height = max_size
            new_width = int(width * max_size / height)
        image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    return image

def validate_image(uploaded_file):
    """Validate uploaded image file"""
    if uploaded_file is None:
        return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
    
    if uploaded_file.size > MAX_FILE_SIZE:
        return False, f"‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_FILE_SIZE//1024//1024} MB)"
    
    try:
        image = Image.open(uploaded_file)
        if image.format.lower() not in ['jpeg', 'jpg', 'png', 'bmp']:
            return False, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPEG, PNG, BMP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"
        return True, "‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    except Exception as e:
        return False, f"‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢: {str(e)}"

def predict_via_api(image_data):
    """Make prediction via API"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json={"image": image_data},
            timeout=30
        )
        if response.status_code == 200:
            return True, response.json()
        else:
            return False, f"API Error: {response.status_code}"
    except requests.exceptions.ConnectionError:
        return False, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)"
    except requests.exceptions.Timeout:
        return False, "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤"
    except Exception as e:
        return False, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

# Mock prediction function for when API is not available
def mock_prediction(image):
    """Mock prediction for demo purposes"""
    time.sleep(1)  # Simulate processing time
    
    # Mock classes (Thai amulet types)
    classes = [
        "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à", "‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤", "‡∏û‡∏£‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏≤", "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏∏‡∏á", 
        "‡∏û‡∏£‡∏∞‡∏ú‡∏á‡∏™‡∏∏‡∏õ‡∏î‡∏µ‡∏õ‡πå", "‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏ä‡∏¥‡∏ô‡∏£‡∏≤‡∏ä"
    ]
    
    # Generate mock predictions
    predictions = []
    confidence_scores = np.random.dirichlet(np.ones(len(classes))) * 100
    
    for class_name, confidence in zip(classes, confidence_scores):
        predictions.append({
            "class": class_name,
            "confidence": float(confidence),
            "probability": float(confidence / 100)
        })
    
    # Sort by confidence
    predictions.sort(key=lambda x: x["confidence"], reverse=True)
    
    return {
        "status": "success",
        "predictions": predictions,
        "top_prediction": predictions[0],
        "processing_time": 1.23,
        "model_version": "v2.1.0"
    }

# Main App Layout
def main():
    # Header
    st.markdown("""
    <div class="main-header fade-in">
        <div class="main-title">üîÆ Amulet-AI</div>
        <div class="main-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - Thai Amulet Classification System</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Features Overview
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card fade-in">
            <h3>üéØ ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</h3>
            <p class="thai-text">‡πÉ‡∏ä‡πâ AI ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card fade-in">
            <h3>‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡πá‡∏ß</h3>
            <p class="thai-text">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card fade-in">
            <h3>üîí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</h3>
            <p class="thai-text">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Image Upload Section
    st.markdown("""
    <div class="upload-card">
        <h2>üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</h2>
        <p class="thai-text">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</p>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        type=['png', 'jpg', 'jpeg', 'bmp'],
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PNG, JPG, JPEG, BMP ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB"
    )
    
    if uploaded_file is not None:
        # Validate file
        is_valid, message = validate_image(uploaded_file)
        
        if not is_valid:
            st.markdown(f"""
            <div class="error-message">
                <strong>‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> {message}
            </div>
            """, unsafe_allow_html=True)
            return
        
        # Display success message
        st.markdown("""
        <div class="success-message">
            <strong>‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</strong> ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        </div>
        """, unsafe_allow_html=True)
        
        # Process image
        try:
            image = Image.open(uploaded_file)
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Resize for display
            display_image = resize_image(image.copy(), max_size=600)
            
            # Display image
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.markdown('<div class="image-container">', unsafe_allow_html=True)
                st.image(display_image, caption="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", use_column_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Prediction Section
            st.markdown("---")
            
            if st.button("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", key="predict_btn"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û..."):
                    # Try API first, fallback to mock
                    image_data = encode_image_to_base64(image)
                    success, result = predict_via_api(image_data)
                    
                    if not success:
                        # Show API error and use mock
                        st.markdown(f"""
                        <div class="warning-message">
                            <strong>‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {result}<br>
                            <em>‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</em>
                        </div>
                        """, unsafe_allow_html=True)
                        result = mock_prediction(image)
                    
                    # Display Results
                    if result.get("status") == "success":
                        st.markdown("""
                        <div class="result-card fade-in">
                            <h2>üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h2>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        predictions = result.get("predictions", [])
                        top_prediction = predictions[0] if predictions else None
                        
                        if top_prediction:
                            # Top Prediction
                            confidence = top_prediction["confidence"]
                            class_name = top_prediction["class"]
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.markdown("""
                                <div class="metric-container">
                                    <h3>üèÜ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</h3>
                                    <h2 style="color: #8B4513;">{}</h2>
                                </div>
                                """.format(class_name), unsafe_allow_html=True)
                            
                            with col2:
                                st.markdown("""
                                <div class="metric-container">
                                    <h3>üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô</h3>
                                    <h2 style="color: #DAA520;">{:.1f}%</h2>
                                </div>
                                """.format(confidence), unsafe_allow_html=True)
                            
                            with col3:
                                processing_time = result.get("processing_time", 0)
                                st.markdown("""
                                <div class="metric-container">
                                    <h3>‚ö° ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</h3>
                                    <h2 style="color: #32CD32;">{:.2f}s</h2>
                                </div>
                                """.format(processing_time), unsafe_allow_html=True)
                            
                            # Confidence Bar
                            st.markdown("### üìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                            
                            for i, pred in enumerate(predictions[:5]):  # Show top 5
                                conf = pred["confidence"]
                                name = pred["class"]
                                
                                # Create progress bar
                                st.write(f"**{name}**")
                                progress_col, percent_col = st.columns([4, 1])
                                
                                with progress_col:
                                    st.progress(conf / 100)
                                
                                with percent_col:
                                    st.write(f"{conf:.1f}%")
                            
                            # Additional Info
                            st.markdown("---")
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.markdown("""
                                <div class="feature-card">
                                    <h4>‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                                    <ul class="thai-text">
                                        <li>‡πÇ‡∏°‡πÄ‡∏î‡∏•: {}</li>
                                        <li>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {}</li>
                                        <li>‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {}x{} ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•</li>
                                    </ul>
                                </div>
                                """.format(
                                    result.get("model_version", "v2.1.0"),
                                    datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                                    image.width, image.height
                                ), unsafe_allow_html=True)
                            
                            with col2:
                                st.markdown("""
                                <div class="feature-card">
                                    <h4>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h4>
                                    <ul class="thai-text">
                                        <li>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</li>
                                        <li>‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</li>
                                        <li>‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</li>
                                    </ul>
                                </div>
                                """, unsafe_allow_html=True)
                        
                        else:
                            st.markdown("""
                            <div class="error-message">
                                <strong>‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ
                            </div>
                            """, unsafe_allow_html=True)
                    
                    else:
                        error_msg = result.get("error", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
                        st.markdown(f"""
                        <div class="error-message">
                            <strong>‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> {error_msg}
                        </div>
                        """, unsafe_allow_html=True)
        
        except Exception as e:
            st.markdown(f"""
            <div class="error-message">
                <strong>‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ<br>
                <em>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {str(e)}</em>
            </div>
            """, unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; margin-top: 2rem;">
        <p class="thai-text">
            üîÆ <strong>Amulet-AI</strong> | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞<br>
            <em>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏°‡∏£‡∏î‡∏Å‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢</em>
        </p>
    </div>
    """, unsafe_allow_html=True)

# Run the app
if __name__ == "__main__":
    main()