#!/usr/bin/env python3
"""
Amulet-AI Frontend - Simple Version
‡∏£‡∏∞‡∏ö‡∏ö Frontend ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
"""

import streamlit as st
import os
import sys
import requests
import time
import numpy as np
from PIL import Image
from datetime import datetime

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configuration
API_BASE_URL = "http://localhost:8000"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="Amulet-AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Enhanced CSS
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap');
    
    .stApp {
        font-family: 'Prompt', sans-serif;
        background: linear-gradient(135deg, #f8f5f0 0%, #ffffff 50%, #faf7f2 100%);
        border: 3px solid #800000;
        border-radius: 20px;
        margin: 20px;
        padding: 20px;
        box-shadow: 0 10px 30px rgba(128, 0, 0, 0.15);
        min-height: calc(100vh - 40px);
    }
    
    .main-header {
        background: linear-gradient(135deg, #800000 0%, #B8860B 100%);
        padding: 3rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: white;
        box-shadow: 0 8px 32px rgba(128, 0, 0, 0.3);
        min-height: 250px;
        display: flex;
        align-items: center;
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #800000 0%, #B8860B 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        font-size: 1.1rem;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 30px rgba(128, 0, 0, 0.4);
    }
    
    .upload-section {
        background: linear-gradient(135deg, rgba(128, 0, 0, 0.05) 0%, rgba(184, 134, 11, 0.05) 100%);
        padding: 2rem;
        border: 2px solid #800000;
        border-radius: 15px;
        text-align: center;
        margin: 2rem 0;
    }
    
    /* Tabs styling */
    .stTabs [data-baseweb="tab-list"] {
        gap: 0;
        background: #f5f5f5;
        border-radius: 10px;
        padding: 4px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
        background: transparent;
        border-radius: 8px;
        color: #666;
        font-weight: 600;
        padding: 0 1.5rem;
        transition: all 0.3s ease;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background: #e0e0e0;
        color: #800000;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #800000 0%, #B8860B 100%) !important;
        color: white !important;
        box-shadow: 0 2px 8px rgba(128, 0, 0, 0.3);
    }
    
    .stTabs [data-baseweb="tab-panel"] {
        padding: 1.5rem;
    }
    
    /* Camera input styling */
    [data-testid="stCameraInput"] {
        border: 2px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        background: white;
        transition: all 0.3s ease;
    }
    
    [data-testid="stCameraInput"]:hover {
        border-color: #800000;
        box-shadow: 0 4px 12px rgba(128, 0, 0, 0.1);
    }
    
    /* File uploader styling */
    .stFileUploader {
        border: 2px dashed #ddd;
        border-radius: 10px;
        padding: 1.5rem;
        background: white;
        transition: all 0.3s ease;
    }
    
    .stFileUploader:hover {
        border-color: #800000;
        background: #fafafa;
    }
    
    /* Logo hover effects */
    .main-header img {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
        padding: 8px;
    }
    
    .main-header img:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 15px rgba(255, 255, 255, 0.3);
    }
    
    /* Loading Spinner */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        backdrop-filter: blur(5px);
    }
    
    .loading-spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #800000;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        box-shadow: 0 4px 20px rgba(128, 0, 0, 0.3);
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .loading-text {
        margin-top: 20px;
        color: #800000;
        font-size: 1.2rem;
        font-weight: 600;
        text-align: center;
    }
    
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
""", unsafe_allow_html=True)

def check_api_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def predict_image(uploaded_file):
    """‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
    try:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
        files = {'file': (uploaded_file.name, uploaded_file.getvalue(), uploaded_file.type)}
        
        response = requests.post(
            f"{API_BASE_URL}/predict",
            files=files,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"API Error: {response.status_code}"}
            
    except Exception as e:
        return {"error": f"Connection Error: {str(e)}"}

def get_logo_base64():
    """Convert logo image to base64 for embedding"""
    try:
        logo_path = os.path.join(os.path.dirname(__file__), 'imgae', 'Amulet-AI_logo.png')
        if os.path.exists(logo_path):
            import base64
            with open(logo_path, 'rb') as img_file:
                return base64.b64encode(img_file.read()).decode()
        return ""
    except:
        return ""

def get_other_logos():
    """Get other partnership logos"""
    try:
        import base64
        logos = {}
        logo_dir = os.path.join(os.path.dirname(__file__), 'imgae')
        
        # Thai-Austrian Logo
        thai_logo_path = os.path.join(logo_dir, 'Logo Thai-Austrain.gif')
        if os.path.exists(thai_logo_path):
            with open(thai_logo_path, 'rb') as f:
                logos['thai_austrian'] = base64.b64encode(f.read()).decode()
        
        # DEPA Logo
        depa_logo_path = os.path.join(logo_dir, 'LogoDEPA-01.png')
        if os.path.exists(depa_logo_path):
            with open(depa_logo_path, 'rb') as f:
                logos['depa'] = base64.b64encode(f.read()).decode()
        
        return logos
    except:
        return {}

def main():
    # Initialize session state for camera images
    if 'front_camera_image' not in st.session_state:
        st.session_state.front_camera_image = None
    if 'back_camera_image' not in st.session_state:
        st.session_state.back_camera_image = None
    if 'show_front_camera' not in st.session_state:
        st.session_state.show_front_camera = False
    if 'show_back_camera' not in st.session_state:
        st.session_state.show_back_camera = False
    if 'is_loading' not in st.session_state:
        st.session_state.is_loading = False
    if 'loading_message' not in st.session_state:
        st.session_state.loading_message = ""
    
    # Show loading overlay if needed
    if st.session_state.is_loading:
        st.markdown(f"""
        <div class="loading-overlay">
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <div class="loading-text">{st.session_state.loading_message}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        # Auto-hide loading after a short time
        time.sleep(1)
        st.session_state.is_loading = False
        st.rerun()
    
    # Get logos
    amulet_logo = get_logo_base64()
    other_logos = get_other_logos()
    
    # Build header with logos
    logos_html = ""
    
    # Add Amulet logo on the left (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 200px)
    if amulet_logo:
        logos_html += f'<img src="data:image/png;base64,{amulet_logo}" style="height: 200px; width: auto; margin-right: 3rem;" alt="Amulet-AI Logo">'
    
    # Add partnership logos on the right (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 200px)
    partner_logos = ""
    if 'thai_austrian' in other_logos:
        partner_logos += f'<img src="data:image/gif;base64,{other_logos["thai_austrian"]}" style="height: 200px; width: auto; margin: 0 15px;" alt="Thai-Austrian Logo">'
    
    if 'depa' in other_logos:
        partner_logos += f'<img src="data:image/png;base64,{other_logos["depa"]}" style="height: 200px; width: auto; margin: 0 15px;" alt="DEPA Logo">'
    
    # Enhanced Header with logos (‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î)
    st.markdown(f"""
    <div class="main-header">
        <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
            <div style="display: flex; align-items: center;">
                {logos_html}
                <div>
                    <h1 style="font-size: 3rem; margin: 0;">AMULET-AI</h1>
                    <h2 style="font-size: 1.5rem; margin: 0.5rem 0 0 0; opacity: 0.9;">
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå
                    </h2>
                </div>
            </div>
            <div style="display: flex; align-items: center; gap: 2rem; margin-left: auto;">
                {partner_logos}
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # API Status
    api_healthy = check_api_health()
    
    if api_healthy:
        st.success("üü¢ API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        st.error("üî¥ API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î Demo")
    
    st.markdown("---")
    
    # File Upload Section with Camera
    st.markdown("## ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        
        # Tabs for upload methods
        tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
        
        front_image = None
        
        with tab1:
            front_image = st.file_uploader(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
                type=['png', 'jpg', 'jpeg'],
                key="front_file"
            )
        
        with tab2:
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            if st.button("üì∏ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", key="open_front_camera", use_container_width=True):
                # Show loading
                st.session_state.is_loading = True
                st.session_state.loading_message = "üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á..."
                st.session_state.show_front_camera = True
                st.rerun()
            
            if st.session_state.show_front_camera:
                st.info("üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î 'Take Photo'")
                front_camera = st.camera_input(
                    "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
                    key="front_camera"
                )
                
                if front_camera is not None:
                    # Show loading for saving image
                    st.session_state.is_loading = True
                    st.session_state.loading_message = "üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ..."
                    st.session_state.front_camera_image = front_camera
                    st.session_state.show_front_camera = False
                    st.success("‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.rerun()
                
                # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", key="cancel_front_camera"):
                    st.session_state.show_front_camera = False
                    st.rerun()
            else:
                st.info("üì∏ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏π‡∏õ (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á)
        display_front_image = front_image or st.session_state.front_camera_image
        if display_front_image:
            st.image(display_front_image, caption="‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", use_container_width=True)
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏£‡∏π‡∏õ
            if st.session_state.front_camera_image and st.button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", key="clear_front_image"):
                st.session_state.is_loading = True
                st.session_state.loading_message = "üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ..."
                st.session_state.front_camera_image = None
                st.rerun()
    
    with col2:
        st.markdown("### ‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        
        # Tabs for upload methods
        tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
        
        back_image = None
        
        with tab1:
            back_image = st.file_uploader(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á",
                type=['png', 'jpg', 'jpeg'],
                key="back_file"
            )
        
        with tab2:
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            if st.button("üì∏ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", key="open_back_camera", use_container_width=True):
                # Show loading
                st.session_state.is_loading = True
                st.session_state.loading_message = "üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á..."
                st.session_state.show_back_camera = True
                st.rerun()
            
            if st.session_state.show_back_camera:
                st.info("üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î 'Take Photo'")
                back_camera = st.camera_input(
                    "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á",
                    key="back_camera"
                )
                
                if back_camera is not None:
                    # Show loading for saving image
                    st.session_state.is_loading = True
                    st.session_state.loading_message = "üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ..."
                    st.session_state.back_camera_image = back_camera
                    st.session_state.show_back_camera = False
                    st.success("‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.rerun()
                
                # ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", key="cancel_back_camera"):
                    st.session_state.show_back_camera = False
                    st.rerun()
            else:
                st.info("üì∏ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏π‡∏õ (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á)
        display_back_image = back_image or st.session_state.back_camera_image
        if display_back_image:
            st.image(display_back_image, caption="‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", use_container_width=True)
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏£‡∏π‡∏õ
            if st.session_state.back_camera_image and st.button("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", key="clear_back_image"):
                st.session_state.is_loading = True
                st.session_state.loading_message = "üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ..."
                st.session_state.back_camera_image = None
                st.rerun()
    
    # Analysis Section
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
    final_front_image = front_image or st.session_state.front_camera_image
    final_back_image = back_image or st.session_state.back_camera_image
    
    if final_front_image and final_back_image:
        st.markdown("---")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            analyze_button = st.button(
                "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI", 
                type="primary", 
                use_container_width=True
            )
        
        if analyze_button:
            st.markdown("## ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                # Try real API first, then fallback to mock
                if api_healthy:
                    result = predict_image(final_front_image)
                else:
                    # Mock result for demo
                    time.sleep(2)
                    thai_names = ['‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á', '‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤', '‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å', '‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∏‡∏ó‡∏ò‡∏Ñ‡∏∏‡∏ì', '‡∏û‡∏£‡∏∞‡πÑ‡∏≠‡∏¢‡πå‡πÑ‡∏Ç‡πà']
                    result = {
                        'thai_name': np.random.choice(thai_names),
                        'confidence': np.random.uniform(0.75, 0.95),
                        'predicted_class': f'class_{np.random.randint(1, 6)}',
                        'analysis_type': 'dual_image',
                        'processing_time': np.random.uniform(1.2, 2.5)
                    }
                
                # Display results
                if 'error' not in result:
                    st.success("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    
                    # Get data from new API format
                    if 'prediction' in result:
                        predicted_class = result['prediction']['class']
                        confidence = result['prediction']['confidence']
                        probabilities = result['prediction']['probabilities']
                        model_info = result.get('model_info', {})
                    else:
                        # Fallback for old format
                        predicted_class = result.get('thai_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
                        confidence = result.get('confidence', 0)
                        probabilities = {}
                        model_info = {}
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
                            predicted_class
                        )
                    
                    with col2:
                        confidence_percent = confidence * 100 if confidence <= 1 else confidence
                        st.metric(
                            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô",
                            f"{confidence_percent:.1f}%"
                        )
                    
                    with col3:
                        processing_time = result.get('processing_time', 0.1)
                        st.metric(
                            "‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
                            f"{processing_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
                        )
                    
                    # Confidence interpretation
                    if confidence >= 0.9:
                        st.success("üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠")
                    elif confidence >= 0.7:
                        st.warning("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
                    else:
                        st.error("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥ - ‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç")
                    
                    # Show probabilities if available
                    if probabilities:
                        st.markdown("### üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
                        
                        # Sort probabilities
                        sorted_probs = sorted(probabilities.items(), key=lambda x: x[1], reverse=True)
                        
                        for class_name, prob in sorted_probs[:5]:  # Show top 5
                            prob_percent = prob * 100 if prob <= 1 else prob
                            st.progress(prob, text=f"{class_name}: {prob_percent:.1f}%")
                    
                    # Model info
                    if model_info:
                        st.markdown("### ü§ñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•")
                        with st.expander("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI"):
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write(f"**‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô**: {model_info.get('version', 'N/A')}")
                                st.write(f"**‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°**: {model_info.get('architecture', 'N/A')}")
                            with col2:
                                st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥**: {model_info.get('accuracy', 'N/A')}")
                                st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™**: {model_info.get('total_classes', 'N/A')}")
                        
                else:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
    
    else:
        st.markdown("""
        <div class="upload-section">
            <h3 style="color: #800000; margin-bottom: 1rem;">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?</h3>
            <p style="color: #666; font-size: 1.1rem;">
                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏•‡∏±‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Tips Section
    st.markdown("---")
    st.markdown("## ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ
        - ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠
        - ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
        - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB
        """)
    
    with col2:
        st.markdown("""
        ### ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        - >90%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
        - 70-90%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        - <70%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥
        - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        """)
    
    # Footer ‡πÅ‡∏•‡∏∞ All Text Content Section
    st.markdown("---")
    
    # Section ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    with st.expander("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", expanded=False):
        st.markdown("## ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        
        st.markdown("### 1. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Header")
        st.text("AMULET-AI")
        st.text("‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå")
        
        st.markdown("### 2. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API")
        st.text("üü¢ API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.text("üî¥ API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î Demo")
        
        st.markdown("### 3. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        st.text("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        st.text("‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        st.text("‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        st.text("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå")
        st.text("üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ")
        st.text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        st.text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        st.text("üì∏ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ")
        st.text("üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        st.text("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        st.text("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        st.text("‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.text("‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.text("üì∏ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        
        st.markdown("### 4. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        st.text("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI")
        st.text("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        st.text("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")
        st.text("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        st.text("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
        st.text("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô")
        st.text("‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        st.text("‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á")
        st.text("‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤")
        st.text("‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å")
        st.text("‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏∏‡∏ó‡∏ò‡∏Ñ‡∏∏‡∏ì")
        st.text("‡∏û‡∏£‡∏∞‡πÑ‡∏≠‡∏¢‡πå‡πÑ‡∏Ç‡πà")
        st.text("‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        st.text("‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        st.text("üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠")
        st.text("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
        st.text("‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥ - ‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç")
        st.text("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
        
        st.markdown("### 5. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        st.text("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?")
        st.text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏•‡∏±‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI")
        st.text("‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.text("‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ")
        st.text("- ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        st.text("- ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠")
        st.text("- ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö")
        st.text("- ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB")
        st.text("‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        st.text("- >90%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å")
        st.text("- 70-90%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        st.text("- <70%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥")
        st.text("- ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        st.markdown("### 6. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Footer")
        st.text("Amulet-AI Project")
        st.text("¬© 2025 Amulet-AI | Powered by Advanced AI Technology")
        
        st.markdown("### 7. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Configuration")
        st.text("API_BASE_URL = http://localhost:8000")
        st.text("MAX_FILE_SIZE = 10MB")
        st.text("Amulet-AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI")
        
        st.markdown("### 8. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        st.text("API Error:")
        st.text("Connection Error:")
        st.text("Import error:")
        
        st.markdown("### 9. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        st.text("enhance = true")
        st.text("analysis_type = dual")
        st.text("analysis_type = single")
        st.text("front.jpg")
        st.text("back.jpg")
        st.text("image/jpeg")
        st.text("class_1")
        st.text("class_2")
        st.text("class_3")
        st.text("class_4")
        st.text("class_5")
        st.text("class_6")
        st.text("dual_image")
        
        st.markdown("### 10. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Metadata")
        st.text("Convert logo image to base64 for embedding")
        st.text("Get other partnership logos")
        st.text("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API")
        st.text("‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        st.text("Amulet-AI_logo.png")
        st.text("Logo Thai-Austrain.gif")
        st.text("LogoDEPA-01.png")
        st.text("Thai-Austrian Logo")
        st.text("DEPA Logo")
        st.text("Amulet-AI Logo")
        
        st.markdown("### 11. CSS Classes ‡πÅ‡∏•‡∏∞ Styling")
        st.text("stApp")
        st.text("main-header")
        st.text("stButton")
        st.text("upload-section")
        st.text("stTabs")
        st.text("stCameraInput")
        st.text("stFileUploader")
        st.text("font-family: Prompt")
        st.text("background: linear-gradient")
        st.text("border-radius: 10px")
        st.text("color: #800000")
        st.text("color: #B8860B")
        st.text("box-shadow")
        st.text("transition: all 0.3s ease")
        st.text("transform: translateY(-2px)")
    
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: #f5f5f5; border-radius: 10px;">
        <h3 style="margin: 0; color: #800000;">Amulet-AI Project</h3>
        <p style="margin: 0.5rem 0 0 0; color: #666;">
            ¬© 2025 Amulet-AI | Powered by Advanced AI Technology
        </p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()