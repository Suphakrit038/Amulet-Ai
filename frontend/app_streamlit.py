"""
üîç Amulet-AI - Advanced Thai Amulet Analysis System
====================================================
Combined Version 3.0 (v1 + v2) with enhanced features:
- Multi-language support (Thai/English)
- Advanced AI analysis with confidence scoring
- Comparison mode for multiple amulets
- Analytics dashboard with interactive charts
- Bookmark system for saving analysis results
- Modern responsive UI with dark/light themes

Author: Amulet-AI Team
Version: 3.0 (Combined v1 + v2)
Date: August 2025
"""

# ==========================================
# IMPORTS AND DEPENDENCIES
# ==========================================
import streamlit as st
import requests
import io
import json
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from PIL import Image, ImageEnhance
from random import uniform, randint, choice
import pandas as pd
from plotly.subplots import make_subplots

# ==========================================
# CONFIGURATION AND CONSTANTS
# ==========================================

# API Configuration
API_URL = "http://localhost:8000"

# HEIC Format Support
try:
    from pillow_heif import register_heif_opener
    register_heif_opener()
    HEIC_SUPPORTED = True
except ImportError:
    HEIC_SUPPORTED = False

# Multi-language Support Dictionary
LANGUAGES = {
    'th': {
        'title': 'üîç Amulet-AI',
        'subtitle': '‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
        'tagline': '‚ö° ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‚Ä¢ üéØ ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‚Ä¢ üîí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
        'upload_title': 'üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        'upload_subtitle': '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: JPG, PNG, HEIC, WEBP, BMP, TIFF',
        'front_image': 'üì∑ ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
        'back_image': 'üì± ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á',
        'required': '‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö',
        'optional': '‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö',
        'analyze_btn': 'üöÄ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        'confidence': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à',
        'authenticity': '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ',
        'top_results': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Top-3)',
        'price_estimate': '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤',
        'market_rec': '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏•‡∏≤‡∏î',
        'compare': '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö',
        'analytics': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
        'saved': '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'
    },
    'en': {
        'title': 'üîç Amulet-AI',
        'subtitle': 'Advanced AI-Powered Thai Amulet Analysis System',
        'tagline': '‚ö° Fast ‚Ä¢ üéØ Accurate ‚Ä¢ üîí Secure',
        'upload_title': 'üì§ Upload Amulet Images',
        'upload_subtitle': 'Supported: JPG, PNG, HEIC, WEBP, BMP, TIFF',
        'front_image': 'üì∑ Front Image',
        'back_image': 'üì± Back Image',
        'required': 'Required',
        'optional': 'Optional',
        'analyze_btn': 'üöÄ Analyze Amulet',
        'confidence': 'Confidence',
        'authenticity': 'Authenticity',
        'top_results': 'All Results (Top-3)',
        'price_estimate': 'Price Estimate',
        'market_rec': 'Market Recommendations',
        'compare': 'Compare',
        'analytics': 'Analytics',
        'saved': 'Saved'
    }
}

# ==========================================
# UTILITY FUNCTIONS
# ==========================================

def get_lang():
    """Get current language setting from session state"""
    return st.session_state.get('language', 'th')

def _(key):
    """Translation helper function for multi-language support"""
    return LANGUAGES[get_lang()].get(key, key)

# ==========================================
# SYSTEM FUNCTIONS
# ==========================================

def check_system_status():
    """Check backend system status and connectivity"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=3)
        if response.status_code == 200:
            return True, "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        else:
            return False, f"‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Status: {response.status_code})"
    except requests.exceptions.ConnectionError:
        return False, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend"
    except requests.exceptions.Timeout:
        return False, "‚è∞ Backend ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤"
    except Exception as e:
        return False, f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

# ==========================================
# IMAGE PROCESSING FUNCTIONS
# ==========================================

def validate_image(uploaded_file):
    """
    Validate and process uploaded image with Smart Preprocessing
    Supports: JPG, JPEG, PNG, HEIC, HEIF, WebP, BMP, TIFF
    """
    try:
        image = Image.open(uploaded_file)
        original_format = image.format
        
        # Smart Preprocessing: Auto resize + enhance
        max_size = 1024
        if max(image.size) > max_size:
            ratio = max_size / max(image.size)
            new_size = tuple(int(dim * ratio) for dim in image.size)
            image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # Convert to RGB if necessary
        if image.mode != 'RGB':
            if image.mode in ('RGBA', 'LA'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'RGBA':
                    background.paste(image, mask=image.split()[-1])
                else:
                    background.paste(image, mask=image.split()[-1])
                image = background
            else:
                image = image.convert('RGB')
        
        # Enhance image quality (increase sharpness)
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(1.2)  # Increase sharpness by 20%
        
        # Convert to bytes
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='JPEG', quality=95)
        img_byte_arr.seek(0)
        
        return image, img_byte_arr, None, original_format
    except Exception as e:
        return None, None, str(e), None

# ==========================================
# DATA ANALYSIS FUNCTIONS
# ==========================================

def create_mock_analysis_result():
    """Generate mock analysis data for testing purposes"""
    amulet_names = [
        "‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏ó‡∏ß‡∏î ‡∏ß‡∏±‡∏î‡∏ä‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ", "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á", "‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤ ‡∏ß‡∏±‡∏î‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏π",
        "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡πÇ‡∏™‡∏ò‡∏£", "‡∏û‡∏£‡∏∞‡∏£‡∏≠‡∏î ‡∏ß‡∏±‡∏î‡πÇ‡∏°‡∏•‡∏µ", "‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏®‡∏∏‡∏Ç ‡∏ß‡∏±‡∏î‡∏õ‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≠‡∏á‡∏°‡∏∞‡∏Ç‡∏≤‡∏°‡πÄ‡∏í‡πà‡∏≤",
        "‡∏û‡∏£‡∏∞‡∏ú‡∏á‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì", "‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏ö‡∏∏‡∏ç ‡∏ß‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡∏ß", "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏∏‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏"
    ]
    
    selected_amulet = choice(amulet_names)
    
    return {
        "top1": {
            "class_name": selected_amulet,
            "confidence": uniform(0.75, 0.98),
            "score": randint(80, 98)
        },
        "top3_predictions": [
            {"class_name": selected_amulet, "confidence": uniform(0.75, 0.98), "score": randint(85, 98)},
            {"class_name": choice([n for n in amulet_names if n != selected_amulet]), "confidence": uniform(0.15, 0.35), "score": randint(60, 80)},
            {"class_name": choice([n for n in amulet_names if n != selected_amulet]), "confidence": uniform(0.05, 0.25), "score": randint(40, 70)}
        ],
        "authenticity_score": randint(70, 95),
        "valuation": {
            "p25": randint(5000, 15000),
            "p50": randint(15000, 50000), 
            "p75": randint(50000, 150000)
        },
        "popularity_score": randint(70, 95),
        "market_recommendations": [
            {"market": "‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞ ‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ô‡∏±‡∏î‡∏î‡∏≤", "score": 95, "note": "‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ"},
            {"market": "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£", "score": 85, "note": "‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ"},
            {"market": "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå Facebook", "score": 75, "note": "‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á"}
        ]
    }

# ==========================================
# BOOKMARK/SAVE SYSTEM
# ==========================================

def save_analysis_result(analysis_data):
    """Save analysis result to session state for later access"""
    if 'saved_analyses' not in st.session_state:
        st.session_state.saved_analyses = []
    
    analysis_id = f"analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    saved_analysis = {
        'id': analysis_id,
        'timestamp': datetime.now(),
        'result': analysis_data,
        'image_name': f"saved_image_{len(st.session_state.saved_analyses) + 1}.jpg"
    }
    
    st.session_state.saved_analyses.append(saved_analysis)
    return analysis_id

# ==========================================
# UI COMPONENT FUNCTIONS
# ==========================================

def setup_page():
    """Sets up the Streamlit page with custom styles, translations, and other configurations."""
    st.set_page_config(
        page_title="Amulet-AI V3",
        page_icon="üîÆ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Initialize session state for language if not present
    if 'language' not in st.session_state:
        st.session_state.language = 'th'

    # Modern CSS with Minimalist Design & Glassmorphism
    st.markdown("""
    <style>
        /* Import Modern Font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        /* Global Variables */
        :root {
            --primary-color: #A855F7; /* Lighter purple for accents */
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --text-primary: #FFFFFF;
            --text-secondary: #E0E0E0;
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --success-color: #10B981;
            --warning-color: #F59E0B;
            --error-color: #EF4444;
            --border-radius: 16px;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        /* Base Styles */
        * {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        /* Main App Background */
        .stApp {
            background: var(--primary-gradient) !important;
            background-attachment: fixed;
        }

        /* Main Container */
        .main .block-container {
            padding: 1rem 2rem;
        }
        
        /* Text colors */
        h1, h2, h3, h4, h5, h6, p, div, span, li, label {
            color: var(--text-primary) !important;
        }
        p, li, label, .st-emotion-cache-1q8dd3e p {
             color: var(--text-secondary) !important;
        }

        /* Hero Section - Simplified */
        .hero-section {
            background: none;
            padding: 2rem 1rem;
            text-align: center;
            color: white;
            margin-bottom: 2rem;
            box-shadow: none;
            border: none;
        }
        
        .hero-title {
            font-size: clamp(2.5rem, 6vw, 4rem);
            font-weight: 700;
            text-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .hero-subtitle {
            font-size: clamp(1.1rem, 3vw, 1.4rem);
            font-weight: 300;
            opacity: 0.9;
        }
        
        /* Glassmorphism Card Style */
        .modern-card, .result-card, .metric-card, .tip-card {
            background: var(--glass-bg) !important;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: var(--border-radius) !important;
            border: 1px solid var(--glass-border) !important;
            box-shadow: none !important;
            transition: var(--transition);
            overflow: hidden;
            padding: 1rem;
        }
        
        .modern-card:hover, .result-card:hover, .metric-card:hover, .tip-card:hover {
            background: rgba(255, 255, 255, 0.15) !important;
            transform: translateY(-4px);
            border-color: rgba(255, 255, 255, 0.3);
        }
        
        /* Button Styles */
        .stButton > button {
            background: var(--glass-bg) !important;
            color: white !important;
            border: 1px solid var(--glass-border) !important;
            border-radius: var(--border-radius) !important;
            padding: 0.75rem 2rem !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
            transition: var(--transition) !important;
            box-shadow: none !important;
            width: 100%;
        }
        
        .stButton > button:hover {
            background: rgba(255, 255, 255, 0.2) !important;
            border-color: rgba(255, 255, 255, 0.3) !important;
            transform: translateY(-2px) !important;
        }
        
        /* Tab Enhancement */
        .stTabs [data-baseweb="tab-list"] {
            gap: 12px;
            border-bottom: none !important;
        }
        
        .stTabs [data-baseweb="tab"] {
            padding: 12px 24px !important;
            border-radius: var(--border-radius) !important;
            border: 1px solid var(--glass-border) !important;
            background: var(--glass-bg) !important;
            transition: var(--transition) !important;
        }
        
        .stTabs [data-baseweb="tab"]:hover {
            background: rgba(255, 255, 255, 0.15) !important;
            transform: translateY(-2px);
        }
        
        .stTabs [aria-selected="true"] {
            background: rgba(255, 255, 255, 0.25) !important;
            border-color: rgba(255, 255, 255, 0.4) !important;
        }

        /* Sidebar Style */
        .st-emotion-cache-16txtl3 {
            background: rgba(0, 0, 0, 0.2) !important;
        }
        
        /* Loading & Animations */
        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .slide-in {
            animation: slideIn 0.6s ease-out;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .main .block-container {
                padding: 1rem;
            }
            .hero-section {
                padding: 1rem;
            }
        }
    </style>
    """, unsafe_allow_html=True)

def show_camera_interface(key_prefix=""):
    """Display camera interface for image capture and upload"""
    st.markdown("""
    <div style="text-align: center; margin: 2rem 0 1rem 0;">
        <h3 style="color: var(--text-primary); margin: 0 0 0.5rem 0; font-weight: 600;">üñºÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
        <p style="color: var(--text-secondary); font-size: 0.9rem; margin: 0;">
            ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï: JPG, JPEG, PNG, HEIC, HEIF, WebP, BMP, TIFF
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
    
    result_image = None
    result_bytes = None
    source = "upload"
    file_info = {}
    
    with tab1:
        uploaded_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Drag & Drop ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)", 
            type=['jpg', 'jpeg', 'png', 'heic', 'heif', 'webp', 'bmp', 'tiff'],
            key=f"upload_{key_prefix}",
            help="üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        )
        if uploaded_file:
            file_size = len(uploaded_file.read())
            uploaded_file.seek(0)  # Reset file pointer
            file_info = {
                'name': uploaded_file.name,
                'size': f"{file_size / (1024*1024):.1f} MB",
                'type': uploaded_file.type
            }
            
            result_image, result_bytes, error, original_format = validate_image(uploaded_file)
            if error:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error}")
                return None, None, None, None
            else:
                st.success(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({original_format}) - Smart Preprocessing ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    
    with tab2:
        camera_input = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á", key=f"camera_{key_prefix}")
        if camera_input:
            file_info = {
                'name': 'camera_capture.jpg',
                'size': f"{len(camera_input.read()) / (1024*1024):.1f} MB",
                'type': 'image/jpeg'
            }
            camera_input.seek(0)  # Reset file pointer
            result_image, result_bytes, error, original_format = validate_image(camera_input)
            source = "camera"
            if error:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error}")
                return None, None, None, None
            else:
                st.success("üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Smart Preprocessing ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    
    return result_image, result_bytes, source, file_info

def create_confidence_gauge(confidence):
    """Create circular confidence gauge component"""
    if confidence >= 80:
        color, status, icon = "var(--success-color)", "‡∏™‡∏π‡∏á", "üéØ"
    elif confidence >= 60:
        color, status, icon = "var(--warning-color)", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‚ö°"
    else:
        color, status, icon = "var(--error-color)", "‡∏ï‡πà‡∏≥", "‚ö†Ô∏è"
    
    return f"""
    <div style="display: flex; align-items: center; justify-content: center; margin: 1rem 0;">
        <div style="position: relative; width: 120px; height: 120px;">
            <svg width="120" height="120" viewBox="0 0 120 120">
                <circle cx="60" cy="60" r="50" fill="none" stroke="rgba(255,255,255,0.2)" stroke-width="8"/>
                <circle cx="60" cy="60" r="50" fill="none" stroke="{color}" stroke-width="8"
                        stroke-dasharray="314.16" stroke-dashoffset="{314.16 * (1 - confidence/100)}"
                        stroke-linecap="round" transform="rotate(-90 60 60)"
                        style="transition: stroke-dashoffset 2s ease-in-out;"/>
            </svg>
            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                <div style="font-size: 1.5rem;">{icon}</div>
                <div style="font-size: 1.2rem; font-weight: 700; color: {color};">{confidence:.1f}%</div>
                <div style="font-size: 0.8rem; color: var(--text-secondary);">{status}</div>
            </div>
        </div>
    </div>
    """

def create_authenticity_score(score):
    """Create authenticity score component with progress bar"""
    if score >= 85:
        color, status, icon = "var(--success-color)", "‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á", "üîí"
    elif score >= 70:
        color, status, icon = "var(--warning-color)", "‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "üîê"
    else:
        color, status, icon = "var(--error-color)", "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "üîì"
    
    return f"""
    <div style="display: flex; align-items: center; gap: 0.5rem;">
        <span style="font-size: 1.2rem;">{icon}</span>
        <div style="flex-grow: 1;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 0.25rem;">
                <span style="font-size: 0.9rem; font-weight: 600; color: var(--text-primary);">Authenticity Score</span>
                <span style="font-size: 0.9rem; font-weight: 700; color: {color};">{score}%</span>
            </div>
            <div style="background: rgba(255,255,255,0.2); height: 6px; border-radius: 3px;">
                <div style="background: {color}; width: {score}%; height: 100%; border-radius: 3px; transition: width 1.5s ease-out;"></div>
            </div>
            <div style="font-size: 0.75rem; color: var(--text-secondary); margin-top: 0.25rem;">{status}</div>
        </div>
    </div>
    """

# ==========================================
# TAB CONTENT FUNCTIONS
# ==========================================

def show_comparison_mode():
    """Display comparison mode for multiple amulets"""
    st.markdown("""
    <div style="text-align: center; margin: 0 0 2rem 0;">
        <h2 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600;">‚öñÔ∏è ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</h2>
        <p style="color: var(--text-secondary); margin: 0; font-size: 1.1rem;">
            ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏≠‡∏á‡∏Ñ‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    num_items = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", [2, 3, 4], index=0)
    st.markdown("### üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
    
    cols = st.columns(num_items)
    comparison_data = []
    
    for i in range(num_items):
        with cols[i]:
            st.markdown(f"""
            <div class="modern-card" style="padding: 1rem; margin-bottom: 1rem; text-align: center;">
                <h4 style="color: var(--primary-color); margin: 0 0 0.5rem 0;">üîç ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i+1}</h4>
            </div>
            """, unsafe_allow_html=True)
            
            uploaded_file = st.file_uploader(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i+1}", type=['jpg', 'jpeg', 'png', 'heic', 'heif', 'webp'], key=f"compare_{i}")
            
            if uploaded_file:
                image, img_bytes, error, _ = validate_image(uploaded_file)
                if image and not error:
                    st.image(image, use_container_width=True)
                    
                    # Mock analysis for comparison
                    mock_data = create_mock_analysis_result()
                    comparison_data.append({
                        'id': i+1,
                        'name': mock_data['top1']['class_name'],
                        'confidence': mock_data['top1']['confidence'] * 100,
                        'authenticity': mock_data['authenticity_score'],
                        'price_estimate': mock_data['valuation']['p50'],
                        'popularity': mock_data.get('popularity_score', 85)
                    })
                    
                    st.markdown(f"""
                    <div style="background: var(--success-color); color: white; padding: 0.5rem; 
                               border-radius: 8px; text-align: center; margin: 0.5rem 0; font-size: 0.85rem;">
                        ‚úÖ {mock_data['top1']['class_name']}<br>
                        <strong>{mock_data['top1']['confidence']*100:.1f}%</strong>
                    </div>
                    """, unsafe_allow_html=True)
    
    # Show comparison results
    if len(comparison_data) >= 2:
        st.markdown("---")
        st.markdown("### üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        
        comparison_df_data = []
        for item in comparison_data:
            comparison_df_data.append({
                '‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á': item['name'],
                '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (%)': f"{item['confidence']:.1f}%",
                '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ (%)': f"{item['authenticity']}%", 
                '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)': f"{item['price_estimate']:,}",
                '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏° (%)': f"{item['popularity']}%"
            })
        
        comparison_df = pd.DataFrame(comparison_df_data)
        st.dataframe(comparison_df, use_container_width=True)
        
        # Visualization with Plotly
        st.markdown("### üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°'),
            specs=[[{"type": "bar"}, {"type": "bar"}], [{"type": "bar"}, {"type": "bar"}]]
        )
        
        names = [item['name'][:20] + '...' if len(item['name']) > 20 else item['name'] for item in comparison_data]
        
        fig.add_trace(go.Bar(x=names, y=[item['confidence'] for item in comparison_data], 
                           name='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à', marker_color='#8B5CF6'), row=1, col=1)
        fig.add_trace(go.Bar(x=names, y=[item['authenticity'] for item in comparison_data],
                           name='‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ', marker_color='#10B981'), row=1, col=2)
        fig.add_trace(go.Bar(x=names, y=[item['price_estimate'] for item in comparison_data],
                           name='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', marker_color='#F59E0B'), row=2, col=1)
        fig.add_trace(go.Bar(x=names, y=[item['popularity'] for item in comparison_data],
                           name='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°', marker_color='#EF4444'), row=2, col=2)
        
        fig.update_layout(height=600, showlegend=False, title_text="üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', font_color='white')
        st.plotly_chart(fig, use_container_width=True)
        
        # Recommendation
        best_item = max(comparison_data, key=lambda x: x['confidence'])
        st.markdown(f"""
        <div class="result-card" style="background: linear-gradient(135deg, #10B981 0%, #059669 100%); color: white;">
            <h4 style="color: white; margin: 0 0 1rem 0;">üèÜ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</h4>
            <h3 style="color: white; margin: 0;">{best_item['name']}</h3>
            <p style="color: rgba(255,255,255,0.9); margin: 0.5rem 0 0 0;">
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {best_item['confidence']:.1f}% ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {best_item['price_estimate']:,} ‡∏ö‡∏≤‡∏ó
            </p>
        </div>
        """, unsafe_allow_html=True)

def show_analytics_dashboard():
    """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•"""
    st.markdown(f"""
    <div style="text-align: center; margin: 0 0 2rem 0;">
        <h2 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600;">üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h2>
        <p style="color: var(--text-secondary); margin: 0; font-size: 1.1rem;">
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Key Metrics Row (Simplified)
    metrics = [
        {"value": "1,247", "label": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "delta": "‚Üó +12%", "color": "var(--primary-color)"},
        {"value": "94.2%", "label": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "delta": "‚Üó +2.1%", "color": "var(--success-color)"},
        {"value": "‡∏ø47,500", "label": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "delta": "‚Üó +8.5%", "color": "var(--warning-color)"},
        {"value": "2.3s", "label": "‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", "delta": "‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 15%", "color": "var(--primary-color)"}
    ]
    
    cols = st.columns(4)
    for i, metric in enumerate(metrics):
        with cols[i]:
            st.markdown(f"""
            <div class="metric-card" style="padding: 1.5rem; text-align: center; height: 100%;">
                <div style="font-size: 2rem; font-weight: 700; color: {metric['color']};">{metric['value']}</div>
                <div style="color: var(--text-secondary); font-size: 0.9rem; margin-top: 0.5rem;">{metric['label']}</div>
                <div style="font-size: 0.75rem; color: var(--text-secondary); opacity: 0.8; margin-top: 0.25rem;">{metric['delta']}</div>
            </div>
            """, unsafe_allow_html=True)

    st.markdown("<hr style='border-color: var(--glass-border); margin: 2rem 0;'>", unsafe_allow_html=True)
    
    # Charts Section (Simplified)
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        st.markdown("### üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        
        # Create trend chart
        dates = [(datetime.now() - timedelta(days=x)).strftime('%d/%m') for x in range(14, 0, -1)]
        analyses = [randint(800, 1500) for _ in range(14)]
        
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(
            x=dates, y=analyses,
            mode='lines',
            name='‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
            line=dict(color='#A855F7', width=3),
            fill='tonexty',
            fillcolor='rgba(168, 85, 247, 0.2)'
        ))
        
        fig_trend.update_layout(
            height=300,
            margin=dict(l=0, r=0, t=30, b=0),
            showlegend=False,
            xaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)'),
            yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)'),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font_color='white'
        )
        
        st.plotly_chart(fig_trend, use_container_width=True)
    
    with col_chart2:
        st.markdown("### üè∑Ô∏è ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°")
        
        # Popular amulets data
        popular_amulets = [
            "‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏ó‡∏ß‡∏î", "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à", "‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤", "‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡πÇ‡∏™‡∏ò‡∏£", "‡∏û‡∏£‡∏∞‡∏£‡∏≠‡∏î", "‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏®‡∏∏‡∏Ç"
        ]
        popularity_scores = sorted([randint(70, 100) for _ in range(6)], reverse=True)
        
        fig_popular = go.Figure()
        fig_popular.add_trace(go.Bar(
            y=[name[:15] for name in popular_amulets],
            x=popularity_scores,
            orientation='h',
            marker=dict(
                color=popularity_scores,
                colorscale='Viridis',
                showscale=False
            ),
            text=[f'{score}%' for score in popularity_scores],
            textposition='inside',
            insidetextanchor='middle'
        ))
        
        fig_popular.update_layout(
            height=300,
            margin=dict(l=0, r=0, t=30, b=0),
            showlegend=False,
            xaxis=dict(showgrid=False, showticklabels=False),
            yaxis=dict(showgrid=False, autorange="reversed"),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font_color='white'
        )
        
        st.plotly_chart(fig_popular, use_container_width=True)

def show_saved_analyses():
    """Display saved analysis results with management options"""
    if 'saved_analyses' not in st.session_state or not st.session_state.saved_analyses:
        st.info("üìù " + ("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ" if get_lang() == 'th' else "No saved analyses yet"))
        return
    
    st.markdown("### üìã " + ("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ" if get_lang() == 'th' else "Saved Analyses"))
    
    for analysis in reversed(st.session_state.saved_analyses):  # Latest first
        with st.expander(f"üîç {analysis['result']['top1']['class_name']} - {analysis['timestamp'].strftime('%d/%m/%Y %H:%M')}"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f"""
                **{('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå' if get_lang() == 'th' else 'Result')}:** {analysis['result']['top1']['class_name']}
                
                **{('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à' if get_lang() == 'th' else 'Confidence')}:** {analysis['result']['top1']['confidence'] * 100:.1f}%
                """)
                
                if 'valuation' in analysis['result']:
                    st.markdown(f"**{('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' if get_lang() == 'th' else 'Price Estimate')}:** {analysis['result']['valuation']['p50']:,} ‡∏ö‡∏≤‡∏ó")
            
            with col2:
                if st.button("üóëÔ∏è " + ("‡∏•‡∏ö" if get_lang() == 'th' else "Delete"), key=f"del_{analysis['id']}"):
                    st.session_state.saved_analyses.remove(analysis)
                    st.rerun()

def show_tips_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏¥‡∏ô‡∏¥‡∏°‡∏≠‡∏•"""
    st.markdown("<hr style='border-color: var(--glass-border); margin: 3rem 0;'>", unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; margin: 3rem 0 2rem 0;">
        <h2 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600;">üí° ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</h2>
        <p style="color: var(--text-secondary); margin: 0; font-size: 1.1rem;">
            ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    tips = {
        "üí° ‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°": "‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏ü‡∏•‡∏ä‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏≤‡∏ö‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏û‡∏£‡∏∞",
        "üìê ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á": "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏î‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö",
        "üîç ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û": "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏°‡∏ä‡∏±‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
    }
    
    cols = st.columns(3)
    for i, (title, content) in enumerate(tips.items()):
        with cols[i]:
            st.markdown(f"""
            <div class="tip-card" style="padding: 1.5rem; text-align: center; height: 100%;">
                <h3 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600; font-size: 1.2rem;">{title}</h3>
                <p style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.6;">{content}</p>
            </div>
            """, unsafe_allow_html=True)

def show_footer():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô Footer ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    st.markdown("<hr style='border-color: var(--glass-border); margin: 3rem 0;'>", unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0; color: var(--text-secondary); font-size: 0.9rem;">
        <p>¬© 2025 Amulet-AI ‚Ä¢ Made with ‚ù§Ô∏è in Thailand</p>
        <p>Version: 3.0 (Minimalist) ‚Ä¢ Build: 2025.08.26</p>
    </div>
    """, unsafe_allow_html=True)

# Main App
def main():
    setup_page()

    # System Status Check
    is_online, status_message = check_system_status()
    if not is_online:
        st.toast(f"üîß {status_message}", icon="‚ö†Ô∏è")
    
    # Hero Section with Multi-language
    st.markdown(f"""
    <div class="hero-section slide-in">
        <h1 class="hero-title">{_('title')}</h1>
        <p class="hero-subtitle">{_('subtitle')}</p>
        <div style="margin-top: 1.5rem; font-size: 0.9rem; opacity: 0.8;">
            {_('tagline')}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar with Enhanced Features
    with st.sidebar:
        # Language Selector
        st.markdown("### üåç Language / ‡∏†‡∏≤‡∏©‡∏≤")
        current_lang = get_lang()
        lang_option = st.radio(
            "Select Language", 
            ["üáπüá≠ ‡πÑ‡∏ó‡∏¢", "üá∫üá∏ English"],
            index=0 if current_lang == 'th' else 1,
            horizontal=True,
            label_visibility="collapsed"
        )
        
        new_lang = 'th' if lang_option.startswith('üáπüá≠') else 'en'
        if new_lang != current_lang:
            st.session_state.language = new_lang
            st.rerun()
        
        st.markdown("---")
        
        st.subheader("üìã " + ("‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" if current_lang == 'th' else "User Guide"))
        
        with st.expander("üìò " + ("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" if current_lang == 'th' else "How to Use"), expanded=False):
            steps = [
                "üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤" if current_lang == 'th' else "üì§ Upload front image",
                "üì∑ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á" if current_lang == 'th' else "üì∑ (Optional) Upload back image",
                "ÔøΩ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á'" if current_lang == 'th' else "ÔøΩ Click 'Analyze Amulet'",
                "üìä ‡∏£‡∏≠‡∏ä‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" if current_lang == 'th' else "üìä View the detailed results"
            ]
            
            for i, step in enumerate(steps, 1):
                st.write(f"{i}. {step}")
        
        st.markdown("---")
        st.info("üí° " + ("‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏î‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" if current_lang == 'th' else "Tip: Use clear, well-lit photos for the most accurate results."))
    
    # Main Navigation Tabs
    tab_analyze, tab_compare, tab_analytics, tab_saved = st.tabs([
        f"üîç {('‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' if get_lang() == 'th' else 'Analyze')}",
        f"‚öñÔ∏è {_('compare')}",
        f"üìä {_('analytics')}",
        f"üìã {_('saved')}"
    ])
    
    with tab_analyze:
        # Upload Section
        st.markdown(f"""
        <div style="text-align: center; margin: 2rem 0;">
            <h2 style="color: var(--text-primary); margin-bottom: 0.5rem; font-weight: 600;">{_('upload_title')}</h2>
            <p style="color: var(--text-secondary); margin: 0; font-size: 1rem;">
                {_('upload_subtitle')}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class="modern-card" style="padding: 1rem; margin-bottom: 1rem;">
                <h4 style="color: var(--success-color); margin: 0 0 0.5rem 0; display: flex; align-items: center;">
                    {_('front_image')}
                    <span style="margin-left: auto; font-size: 0.7rem; background: #FEF3C7; color: #92400E; padding: 2px 8px; border-radius: 12px;">{_('required')}</span>
                </h4>
                <p style="color: var(--text-secondary); font-size: 0.85rem; margin: 0;">‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</p>
            </div>
            """, unsafe_allow_html=True)
            
            front_image, front_bytes, front_source, front_info = show_camera_interface("front")
            
            if front_image and front_bytes:
                st.markdown(f"""
                <div style="text-align: center; margin: 1rem 0;">
                    <div style="display: inline-flex; align-items: center; background: var(--success-color); color: white; 
                               padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.85rem; font-weight: 500;">
                        ‚úÖ <span style="margin-left: 0.5rem;">‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({front_source}) - {front_info.get('size', 'N/A')}</span>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                st.image(front_image, use_container_width=True)
                st.session_state.front_data = front_bytes
                st.session_state.front_filename = f"front_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        
        with col2:
            st.markdown(f"""
            <div class="modern-card" style="padding: 1rem; margin-bottom: 1rem;">
                <h4 style="color: var(--warning-color); margin: 0 0 0.5rem 0; display: flex; align-items: center;">
                    {_('back_image')}
                    <span style="margin-left: auto; font-size: 0.7rem; background: #E0E7FF; color: #3730A3; padding: 2px 8px; border-radius: 12px;">{_('optional')}</span>
                </h4>
                <p style="color: var(--text-secondary); font-size: 0.85rem; margin: 0;">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</p>
            </div>
            """, unsafe_allow_html=True)
            
            back_image, back_bytes, back_source, back_info = show_camera_interface("back")
            
            if back_image and back_bytes:
                st.markdown(f"""
                <div style="text-align: center; margin: 1rem 0;">
                    <div style="display: inline-flex; align-items: center; background: var(--success-color); color: white; 
                               padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.85rem; font-weight: 500;">
                        ‚úÖ <span style="margin-left: 0.5rem;">‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({back_source}) - {back_info.get('size', 'N/A')}</span>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                st.image(back_image, use_container_width=True)
                st.session_state.back_data = back_bytes
                st.session_state.back_filename = f"back_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    
        # Analysis Button and Results
        if hasattr(st.session_state, 'front_data') and st.session_state.front_data:
            st.markdown("""
            <div style="margin: 3rem 0 2rem 0; text-align: center;">
                <div style="height: 1px; background: var(--glass-border); border-radius: 1px; margin: 1rem auto; width: 80%;"></div>
            </div>
            """, unsafe_allow_html=True)
            
            analyze_col1, analyze_col2, analyze_col3 = st.columns([1, 2, 1])
            with analyze_col2:
                if st.button(_('analyze_btn'), key="main_analyze", type="primary"):
                    # Animation during analysis
                    with st.spinner("üîç " + ("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á..." if get_lang() == 'th' else "Analyzing amulet...")):
                        progress_bar = st.progress(0)
                        for i in range(101):
                            progress_bar.progress(i)
                            if i < 30:
                                st.write("üîÑ " + ("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û..." if get_lang() == 'th' else "Processing images..."))
                            elif i < 70:
                                st.write("üß† " + ("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..." if get_lang() == 'th' else "AI analyzing..."))
                            else:
                                st.write("üìä " + ("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå..." if get_lang() == 'th' else "Finalizing results..."))
                        
                        # Simulate API call
                        try:
                            files = {'front_image': ('front.jpg', st.session_state.front_data, 'image/jpeg')}
                            if hasattr(st.session_state, 'back_data') and st.session_state.back_data:
                                files['back_image'] = ('back.jpg', st.session_state.back_data, 'image/jpeg')
                            
                            response = requests.post(f"{API_URL}/analyze", files=files, timeout=30)
                            
                            if response.status_code == 200:
                                result = response.json()
                                st.session_state.analysis_result = result
                                st.success("‚úÖ " + ("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!" if get_lang() == 'th' else "Analysis completed!"))
                            else:
                                # Mock result for demo
                                mock_result = create_mock_analysis_result()
                                st.session_state.analysis_result = mock_result
                                st.info("üîß " + ("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Backend ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)" if get_lang() == 'th' else "Using mock data (Backend unavailable)"))
                        except:
                            mock_result = create_mock_analysis_result()
                            st.session_state.analysis_result = mock_result
                            st.info("üîß " + ("‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)" if get_lang() == 'th' else "Using mock data (Connection failed)"))
            
            # Display Results
            if hasattr(st.session_state, 'analysis_result') and st.session_state.analysis_result:
                result = st.session_state.analysis_result
                st.markdown("""
                <div style="margin: 3rem 0 2rem 0;">
                    <h2 style="text-align: center; color: var(--text-primary); margin: 0 0 2rem 0; font-weight: 600;">
                        üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    </h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Top Result Card
                st.markdown(f"""
                <div class="result-card slide-in">
                    <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                        <h3 style="color: var(--primary-color); margin: 0; flex-grow: 1; font-weight: 600;">
                            üèÜ {result['top1']['class_name']}
                        </h3>
                        <div style="display: flex; align-items: center; gap: 1rem;">
                            <span style="background: var(--success-color); color: white; padding: 0.25rem 0.75rem; 
                                       border-radius: 20px; font-size: 0.85rem; font-weight: 500;">
                                Top Match
                            </span>
                        </div>
                    </div>
                    {create_authenticity_score(result['authenticity_score'])}
                </div>
                """, unsafe_allow_html=True)
                
                # Confidence Gauge and Metrics
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(create_confidence_gauge(result['top1']['confidence'] * 100), unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card" style="padding: 1.5rem;">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem; color: var(--text-primary);">
                           
                            {result['top1']['confidence'] * 100:.1f}%
                        </div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">{_('confidence')}</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="metric-card" style="padding: 1.5rem;">
                        <div style="font-size: 2rem; margin-bottom: 0.5rem; color: var(--text-primary);">
                            {result['authenticity_score']}%
                        </div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem;">{_('authenticity')}</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Top-3 Results Section
                st.markdown(f"""
                <div style="margin: 2rem 0;">
                    <h3 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600;">
                        üîç {('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î' if get_lang() == 'th' else 'Top-3 Results')}
                    </h3>
                </div>
                """, unsafe_allow_html=True)
                
                top3_cols = st.columns(3)
                
                for i, prediction in enumerate(result['top3_predictions']):
                    with top3_cols[i]:
                        st.markdown(f"""
                        <div class="modern-card" style="padding: 1rem; text-align: center; margin-bottom: 1rem;">
                            <h4 style="color: var(--primary-color); margin: 0 0 0.5rem 0; font-weight: 500;">
                                {i+1}. {prediction['class_name']}
                            </h4>
                            <div style="font-size: 1.5rem; margin: 0.5rem 0;">
                                {prediction['confidence'] * 100:.1f}%
                            </div>
                            <div style="color: var(--text-secondary); font-size: 0.85rem; margin: 0;">
                                {(_('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à' if get_lang() == 'th' else 'Confidence'))}
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                
                # Price Estimate and Market Recommendations
                st.markdown(f"""
                <div style="margin: 2rem 0;">
                    <h3 style="color: var(--text-primary); margin: 0 0 1rem 0; font-weight: 600;">
                        üí∞ {('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' if get_lang() == 'th' else 'Price Estimate & Market Recommendations')}
                    </h3>
                </div>
                """, unsafe_allow_html=True)
                
                col_price, col_market = st.columns(2)
                
                with col_price:
                    st.markdown(f"""
                    <div class="metric-card" style="text-align: center; padding: 1.5rem;">
                        <div style="font-size: 2rem; font-weight: 700; color: var(--warning-color);">
                            {result['valuation']['p50']:,} ‡∏ö‡∏≤‡∏ó
                        </div>
                        <div style="color: var(--text-secondary); font-size: 0.9rem; margin: 0.5rem 0;">
                            {(_('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if get_lang() == 'th' else 'Estimated Price'))}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col_market:
                    st.markdown(f"""
                    <div class="modern-card" style="padding: 1rem; text-align: center;">
                        <h4 style="color: var(--primary-color); margin: 0 0 0.5rem 0; font-weight: 500;">
                            {(_('‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' if get_lang() == 'th' else 'Recommended Markets'))}
                        </h4>
                        <ul style="list-style-type: none; padding: 0; margin: 0;">
                    """, unsafe_allow_html=True)
                    
                    for rec in result['market_recommendations']:
                        st.markdown(f"""
                        <li style="margin: 0.5rem 0;">
                            <div style="display: flex; align-items: center; justify-content: center;">
                                <div style="width: 8px; height: 8px; border-radius: 50%; background: var(--success-color); margin-right: 0.5rem;"></div>
                                <div style="color: var(--text-primary); font-weight: 600; font-size: 0.9rem;">
                                {rec['market']}
                                </div>
                            </div>
                        </li>
                        """, unsafe_allow_html=True)
                    
                    st.markdown(f"""
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Save Analysis Button
                if st.button("üíæ " + ("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå" if get_lang() == 'th' else "Save Analysis"), key="save_analysis"):
                    analysis_id = save_analysis_result(result)
                    st.success("‚úÖ " + ("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!" if get_lang() == 'th' else "Saved successfully!"))
    
    with tab_compare:
        show_comparison_mode()
    
    with tab_analytics:
        show_analytics_dashboard()
    
    with tab_saved:
        show_saved_analyses()
    
    # Footer
    show_footer()

if __name__ == "__main__":
    main()
