import streamlit as st
import requests
from datetime import datetime
from PIL import Image
import io

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HEIC format
try:
    from pillow_heif import register_heif_opener
    register_heif_opener()
    SUPPORTED_FORMATS = ["jpg", "jpeg", "png", "heic", "heif", "webp", "bmp", "tiff"]
    FORMAT_DISPLAY = "JPG, JPEG, PNG, HEIC, HEIF, WebP, BMP, TIFF"
except ImportError:
    SUPPORTED_FORMATS = ["jpg", "jpeg", "png", "webp", "bmp", "tiff"]
    FORMAT_DISPLAY = "JPG, JPEG, PNG, WebP, BMP, TIFF"

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å st.secrets.get() ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡πÜ
API_URL = "http://localhost:8000"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
def validate_and_convert_image(uploaded_file):
    try:
        uploaded_file.seek(0)
        img = Image.open(uploaded_file)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ API
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='JPEG', quality=95)
        img_byte_arr.seek(0)
        
        uploaded_file.seek(0)  # reset original file pointer
        return True, img, img_byte_arr, None
    except Exception as e:
        return False, None, None, str(e)

st.set_page_config(
    page_title="Amulet-AI", 
    page_icon="üîç", 
    layout="centered",
    initial_sidebar_state="expanded"
)

# Header Section
st.title("üîç Amulet-AI")
st.markdown("### ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå")
st.markdown("---")

# Sidebar
with st.sidebar:
    st.header("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.markdown("""
    1. üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    2. üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    3. üîç ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
    4. ‚è≥ ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    5. üìä ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    """)
    
    st.markdown("---")
    st.header("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    st.info("‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    st.info("üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Top-3")
    st.info("üí∞ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î")
    st.info("üõí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Ç‡∏≤‡∏¢")

# Main Content
st.subheader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
st.info(f"üìã ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {FORMAT_DISPLAY}")

# Image input options
col_upload, col_camera = st.columns(2)

with col_upload:
    st.markdown("**üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå**")

with col_camera:
    st.markdown("**üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á**")
    st.caption("üîí ‡∏à‡∏∞‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

col1, col2 = st.columns(2)

col1, col2 = st.columns(2)

with col1:
    st.markdown("**‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤** (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
    
    # Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ input
    tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
    
    with tab1:
        front_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", 
            type=SUPPORTED_FORMATS,
            key="front_upload"
        )
        front = front_file
        front_source = "upload"
    
    with tab2:
        if st.button("üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", key="front_camera_btn", use_container_width=True):
            st.session_state.show_front_camera = True
        
        if st.session_state.get('show_front_camera', False):
            front_camera = st.camera_input(
                "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
                key="front_camera"
            )
            if front_camera:
                front = front_camera
                front_source = "camera"
                # ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à
                if st.button("‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ", key="front_camera_confirm"):
                    st.session_state.show_front_camera = False
                    st.rerun()
            else:
                front = front_file if 'front_file' in locals() and front_file else None
                front_source = "upload"
        else:
            front = front_file if 'front_file' in locals() and front_file else None
            front_source = "upload"
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if front:
        is_valid, processed_img, processed_bytes, error_msg = validate_and_convert_image(front)
        if is_valid:
            st.image(processed_img, caption=f"‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ({front_source})", use_container_width=True)
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
            st.session_state.front_processed = processed_bytes
            st.session_state.front_filename = front.name if hasattr(front, 'name') else f"camera_front_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        else:
            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error_msg}")
            st.warning("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà")

with col2:
    st.markdown("**‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á** (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
    
    # Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ input
    tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", "üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
    
    with tab1:
        back_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", 
            type=SUPPORTED_FORMATS,
            key="back_upload"
        )
        back = back_file
        back_source = "upload"
    
    with tab2:
        if st.button("üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", key="back_camera_btn", use_container_width=True):
            st.session_state.show_back_camera = True
        
        if st.session_state.get('show_back_camera', False):
            back_camera = st.camera_input(
                "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á",
                key="back_camera"
            )
            if back_camera:
                back = back_camera
                back_source = "camera"
                # ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à
                if st.button("‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ", key="back_camera_confirm"):
                    st.session_state.show_back_camera = False
                    st.rerun()
            else:
                back = back_file if 'back_file' in locals() and back_file else None
                back_source = "upload"
        else:
            back = back_file if 'back_file' in locals() and back_file else None
            back_source = "upload"
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if back:
        is_valid, processed_img, processed_bytes, error_msg = validate_and_convert_image(back)
        if is_valid:
            st.image(processed_img, caption=f"‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á ({back_source})", use_container_width=True)
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
            st.session_state.back_processed = processed_bytes
            st.session_state.back_filename = back.name if hasattr(back, 'name') else f"camera_back_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        else:
            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error_msg}")
            st.warning("üí° ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà")

st.markdown("---")

# Analysis Section
if front and hasattr(st.session_state, 'front_processed'):
    if st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", type="primary", use_container_width=True):
        # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        files = {"front": (st.session_state.front_filename, st.session_state.front_processed, "image/jpeg")}
        if back and hasattr(st.session_state, 'back_processed'):
            files["back"] = (st.session_state.back_filename, st.session_state.back_processed, "image/jpeg")
        
        with st.spinner("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
            try:
                r = requests.post(f"{API_URL}/predict", files=files, timeout=60)
                
                if r.ok:
                    data = r.json()
                    st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    
                    # Main Result
                    st.markdown("---")
                    st.subheader("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    
                    # Top-1 Result with styling
                    confidence_percent = data['top1']['confidence'] * 100
                    st.markdown(f"""
                    <div style="padding: 20px; border-radius: 10px; background-color: #f0f8ff; border-left: 5px solid #1f77b4;">
                        <h3 style="color: #1f77b4; margin: 0;">üèÜ {data['top1']['class_name']}</h3>
                        <p style="font-size: 18px; margin: 10px 0;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: <strong>{confidence_percent:.1f}%</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Top-3 Results
                    st.markdown("---")
                    st.subheader("üìä ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ (Top-3)")
                    
                    # Create a styled table
                    for i, item in enumerate(data['topk'], 1):
                        confidence_pct = item['confidence'] * 100
                        if i == 1:
                            icon = "ü•á"
                        elif i == 2:
                            icon = "ü•à"
                        else:
                            icon = "ü•â"
                        
                        col_rank, col_name, col_conf = st.columns([0.5, 3, 1])
                        with col_rank:
                            st.markdown(f"**{icon}**")
                        with col_name:
                            st.markdown(f"**{item['class_name']}**")
                        with col_conf:
                            st.markdown(f"`{confidence_pct:.1f}%`")
                    
                    # Price Valuation
                    st.markdown("---")
                    st.subheader("üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
                    
                    price_col1, price_col2, price_col3 = st.columns(3)
                    with price_col1:
                        st.metric(
                            label="üí∏ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥ (P05)",
                            value=f"{data['valuation']['p05']:,.0f} ‡∏ø",
                            help="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î"
                        )
                    with price_col2:
                        st.metric(
                            label="üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏≤‡∏á (P50)",
                            value=f"{data['valuation']['p50']:,.0f} ‡∏ø",
                            help="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î"
                        )
                    with price_col3:
                        st.metric(
                            label="üí≥ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á (P95)",
                            value=f"{data['valuation']['p95']:,.0f} ‡∏ø",
                            help="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î"
                        )
                    
                    # Recommendations
                    st.markdown("---")
                    st.subheader("üõí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
                    
                    for i, rec in enumerate(data["recommendations"], 1):
                        with st.expander(f"üìç {rec['market']}", expanded=i==1):
                            st.write(f"üí° **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** {rec['reason']}")
                            if rec['market'] == "Facebook Marketplace":
                                st.info("üîó ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
                            elif rec['market'] == "Shopee":
                                st.info("üõçÔ∏è ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏µ")
                
                else:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {r.status_code} - {r.text}")
                    
            except requests.exceptions.Timeout:
                st.error("‚è∞ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            except requests.exceptions.ConnectionError:
                st.error("üîå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            except Exception as e:
                st.error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}")

else:
    if front:
        st.warning("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà")
    else:
        st.info("üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

# Tips section
st.markdown("---")
st.subheader("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ")
col_tip1, col_tip2, col_tip3 = st.columns(3)

with col_tip1:
    st.markdown("""
    **üì∏ ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á**
    - ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
    - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô
    - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Flash
    """)

with col_tip2:
    st.markdown("""
    **üéØ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á**
    - ‡∏ñ‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    - ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
    """)

with col_tip3:
    st.markdown("""
    **üñºÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á**
    - ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
    - ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô
    - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô
    """)

# Footer
st.markdown("---")
col_info1, col_info2, col_info3 = st.columns(3)

with col_info1:
    st.markdown("""
    <div style="text-align: center;">
        <h4>ü§ñ AI Technology</h4>
        <p>TensorFlow + FastAPI</p>
    </div>
    """, unsafe_allow_html=True)

with col_info2:
    st.markdown("""
    <div style="text-align: center;">
        <h4>üì± Multi-Format</h4>
        <p>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HEIC, JPG, PNG+</p>
    </div>
    """, unsafe_allow_html=True)

with col_info3:
    st.markdown("""
    <div style="text-align: center;">
        <h4>üì∑ Camera Ready</h4>
        <p>‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
    </div>
    """, unsafe_allow_html=True)

# Development info
with st.expander("üîß Developer Info"):
    st.write(f"üìÖ Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    st.write(f"üåê API URL: {API_URL}")
    st.write("üë®‚Äçüíª Developed with Streamlit & FastAPI")