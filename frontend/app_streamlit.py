import streamlit as st
import requests
import io
from datetime import datetime
from PIL import Image

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HEIC format
try:
    from pillow_heif import register_heif_opener
    register_heif_opener()
    HEIC_SUPPORTED = True
except ImportError:
    HEIC_SUPPORTED = False

# API Configuration
API_URL = "http://localhost:8000"

# Page Configuration
st.set_page_config(
    page_title="üîç Amulet-AI", 
    page_icon="üîç", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Clean CSS
st.markdown("""
<style>
    .main {
        padding: 2rem 1rem;
    }
    
    .header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        color: white;
        margin-bottom: 2rem;
    }
    
    .upload-box {
        border: 2px dashed #ddd;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #f8f9fa;
        margin: 1rem 0;
    }
    
    .result-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .confidence-high { border-left: 4px solid #28a745; }
    .confidence-medium { border-left: 4px solid #ffc107; }
    .confidence-low { border-left: 4px solid #dc3545; }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        width: 100%;
    }
    
    .price-metric {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        margin: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# Functions
def validate_image(uploaded_file):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"""
    try:
        image = Image.open(uploaded_file)
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='JPEG', quality=95)
        img_byte_arr.seek(0)
        
        return image, img_byte_arr, None
    except Exception as e:
        return None, None, str(e)

# Main App
def main():
    # Header
    st.markdown("""
    <div class="header">
        <h1>üîç Amulet-AI</h1>
        <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Upload Section
    st.subheader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üì∑ ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤** (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        front_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", 
            type=['jpg', 'jpeg', 'png', 'heic'],
            key="front"
        )
        
        if front_file:
            image, img_bytes, error = validate_image(front_file)
            if image:
                st.image(image, caption="‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", use_container_width=True)
                st.session_state.front_data = img_bytes
            else:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error}")
    
    with col2:
        st.markdown("**üì∑ ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á** (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        back_file = st.file_uploader(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", 
            type=['jpg', 'jpeg', 'png', 'heic'],
            key="back"
        )
        
        if back_file:
            image, img_bytes, error = validate_image(back_file)
            if image:
                st.image(image, caption="‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", use_container_width=True)
                st.session_state.back_data = img_bytes
            else:
                st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {error}")
    
    # Analysis Button
    if front_file and hasattr(st.session_state, 'front_data'):
        st.markdown("---")
        
        if st.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û", type="primary"):
            with st.spinner("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                try:
                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå
                    files = {"front": ("front.jpg", st.session_state.front_data, "image/jpeg")}
                    if hasattr(st.session_state, 'back_data'):
                        files["back"] = ("back.jpg", st.session_state.back_data, "image/jpeg")
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    response = requests.post(f"{API_URL}/predict", files=files, timeout=30)
                    
                    if response.ok:
                        data = response.json()
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                        st.success("‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                        
                        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
                        st.subheader("üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                        
                        confidence = data['top1']['confidence'] * 100
                        if confidence >= 80:
                            conf_class = "confidence-high"
                        elif confidence >= 60:
                            conf_class = "confidence-medium"
                        else:
                            conf_class = "confidence-low"
                        
                        st.markdown(f"""
                        <div class="result-card {conf_class}">
                            <h3>ü•á {data['top1']['class_name']}</h3>
                            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {confidence:.1f}%</strong></p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Top-3 Results
                        st.subheader("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                        
                        for i, result in enumerate(data['topk'], 1):
                            conf_pct = result['confidence'] * 100
                            medal = ["ü•á", "ü•à", "ü•â"][i-1]
                            
                            col_rank, col_name, col_conf = st.columns([0.5, 3, 1])
                            with col_rank:
                                st.markdown(f"**{medal}**")
                            with col_name:
                                st.write(result['class_name'])
                            with col_conf:
                                st.write(f"{conf_pct:.1f}%")
                        
                        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                        st.subheader("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
                        
                        price_col1, price_col2, price_col3 = st.columns(3)
                        
                        with price_col1:
                            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥ (P05)", f"{data['valuation']['p05']:,} ‡∏ø")
                        with price_col2:
                            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏≤‡∏á (P50)", f"{data['valuation']['p50']:,} ‡∏ø")
                        with price_col3:
                            st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á (P95)", f"{data['valuation']['p95']:,} ‡∏ø")
                        
                        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                        st.subheader("üõí ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
                        
                        for rec in data.get('recommendations', []):
                            with st.expander(f"üìç {rec['market']}"):
                                st.write(f"üí° {rec['reason']}")
                    
                    else:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                        
                except requests.exceptions.ConnectionError:
                    st.error("üîå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ")
                except Exception as e:
                    st.error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    # Tips Section
    st.markdown("---")
    st.subheader("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
    
    tip_col1, tip_col2, tip_col3 = st.columns(3)
    
    with tip_col1:
        st.markdown("""
        **üì∏ ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á**
        - ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
        - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏á‡∏≤
        - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        """)
    
    with tip_col2:
        st.markdown("""
        **üéØ ‡∏°‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á**
        - ‡∏ñ‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
        - ‡∏£‡∏∞‡∏¢‡∏∞ 20-30 ‡∏ã‡∏°.
        - ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡∏±‡∏î
        """)
    
    with tip_col3:
        st.markdown("""
        **üñºÔ∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á**
        - ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
        - ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô
        - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏£‡∏ö‡∏Å‡∏ß‡∏ô
        """)
    
    # Footer
    st.markdown("---")
    st.markdown("**üîß ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ:** TensorFlow + FastAPI + Streamlit")
    
    # Warning
    st.warning("""
    ‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:** ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á
    """)

if __name__ == "__main__":
    main()