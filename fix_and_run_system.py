"""
‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""
import os
import sys
import time
import subprocess
import webbrowser
import signal
import requests
from pathlib import Path

def kill_processes(process_names):
    """‡∏¢‡∏∏‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡πâ‡∏≤‡∏á"""
    print("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏Å‡πà‡∏≤...")
    
    import psutil
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if any(name.lower() in proc.name().lower() for name in process_names):
                try:
                    os.kill(proc.pid, signal.SIGTERM)
                    print(f"    ‡∏¢‡∏∏‡∏ï‡∏¥ {proc.name()} (PID: {proc.pid})")
                except Exception as e:
                    print(f"    ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∏‡∏ï‡∏¥ {proc.name()} (PID: {proc.pid}): {e}")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

def find_executable(name):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ executable ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô"""
    base_dir = Path(__file__).parent
    venv_dir = base_dir / '.venv'
    
    if sys.platform == 'win32':
        exec_path = venv_dir / 'Scripts' / f"{name}.exe"
        python_path = venv_dir / 'Scripts' / 'python.exe'
    else:
        exec_path = venv_dir / 'bin' / name
        python_path = venv_dir / 'bin' / 'python'
    
    if exec_path.exists():
        return str(exec_path)
    elif python_path.exists():
        return f"{python_path} -m {name}"
    
    return name  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ system-wide

def start_backend():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô backend API"""
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Backend API...")
    
    backend_script = Path(__file__).parent / 'backend' / 'mock_api.py'
    python_exe = find_executable('python').split(' ')[0]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô path
    
    if not backend_script.exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {backend_script}")
        sys.exit(1)
    
    command = [python_exe, str(backend_script)]
    try:
        process = subprocess.Popen(command, 
                                  stdout=subprocess.PIPE, 
                                  stderr=subprocess.STDOUT,
                                  creationflags=subprocess.CREATE_NEW_CONSOLE if sys.platform == 'win32' else 0)
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        print("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
        start_time = time.time()
        while time.time() - start_time < 10:  # ‡∏£‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            try:
                response = requests.get("http://127.0.0.1:8000/health", timeout=1)
                if response.status_code == 200:
                    print("‚úÖ Backend API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
                    return True
            except requests.exceptions.RequestException:
                time.sleep(0.5)
        
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° backend API: {e}")
        return False

def start_streamlit():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Streamlit frontend"""
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Streamlit frontend...")
    
    streamlit_app = Path(__file__).parent / 'frontend' / 'app_streamlit.py'
    
    if not streamlit_app.exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏≠‡∏õ Streamlit: {streamlit_app}")
        sys.exit(1)
    
    streamlit_command = find_executable('streamlit')
    if ' ' in streamlit_command:  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "python -m streamlit"
        parts = streamlit_command.split(' ', 2)
        command = [
            parts[0],
            "-m",
            "streamlit",
            "run",
            str(streamlit_app),
            "--server.port=8501",
            "--server.address=127.0.0.1",
            "--server.enableCORS=false",
            "--server.enableXsrfProtection=false",
            "--browser.serverAddress=127.0.0.1",
            "--logger.level=info"
        ]
    else:
        command = [
            streamlit_command,
            "run",
            str(streamlit_app),
            "--server.port=8501",
            "--server.address=127.0.0.1",
            "--server.enableCORS=false", 
            "--server.enableXsrfProtection=false",
            "--browser.serverAddress=127.0.0.1",
            "--logger.level=info"
        ]
    
    try:
        process = subprocess.Popen(command, 
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT,
                                   creationflags=subprocess.CREATE_NEW_CONSOLE if sys.platform == 'win32' else 0)
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        print("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
        time.sleep(5)
        
        # ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå
        print("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå...")
        webbrowser.open("http://127.0.0.1:8501")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Streamlit: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("=" * 50)
    print("      Amulet-AI: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î      ")
    print("=" * 50)
    
    try:
        # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á psutil ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        try:
            import psutil
        except ImportError:
            print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á psutil...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "psutil"])
            import psutil
        
        # ‡∏¢‡∏∏‡∏ï‡∏¥‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏Å‡πà‡∏≤
        kill_processes(['python', 'streamlit'])
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° backend
        if not start_backend():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° backend ‡πÑ‡∏î‡πâ")
            return 1
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend
        if not start_streamlit():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° frontend ‡πÑ‡∏î‡πâ")
            return 1
        
        print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        print("üì° Backend API: http://127.0.0.1:8000")
        print("üñ•Ô∏è Frontend: http://127.0.0.1:8501")
        print("\nüëâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        print("‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î http://127.0.0.1:8501 ‡πÄ‡∏≠‡∏á")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Ctrl+C
        print("\nüëã ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        kill_processes(['python', 'streamlit'])
        print("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
